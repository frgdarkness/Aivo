---
description: Auto Task Execution Rule - Spec-driven precision workflow cho automatic task execution. K√≠ch ho·∫°t khi working v·ªõi automated task execution, spec-driven development, ho·∫∑c surgical precision workflows.
alwaysApply: false
---
# Auto Task Execution Rule - Spec-Driven Precision

## M·ª•c ƒë√≠ch

Rule n√†y ƒë·ªãnh nghƒ©a quy tr√¨nh t·ª± ƒë·ªông th·ª±c hi·ªán c√°c task theo nguy√™n t·∫Øc **Spec-Driven Development** v·ªõi **Surgical Precision** - ONE task at a time, atomic changes, clear reasoning before execution. T√≠ch h·ª£p ƒë·∫ßy ƒë·ªß v·ªõi EARS requirements, Kiro task system, v√† Context7 validation.

## Spec-Driven Principles

### Core Loop (MANDATORY)

1. **Planning**: Analyze task requirements v√† EARS specifications
2. **Reasoning**: Document WHY v√† HOW tr∆∞·ªõc khi th·ª±c hi·ªán
3. **Taking Actions**: Execute ONE atomic change at a time
4. **Evaluating Results**: Validate against acceptance criteria

### Surgical Precision Rules

- **ONE TASK**: Ch·ªâ th·ª±c hi·ªán m·ªôt task t·∫°i m·ªôt th·ªùi ƒëi·ªÉm
- **ATOMIC CHANGES**: M·ªói thay ƒë·ªïi ph·∫£i ƒë·ªôc l·∫≠p v√† c√≥ th·ªÉ revert
- **CLEAR REASONING**: Document l√Ω do cho m·ªói quy·∫øt ƒë·ªãnh
- **VALIDATION FIRST**: Ki·ªÉm tra tr∆∞·ªõc v√† sau m·ªói thay ƒë·ªïi

## ƒêi·ªÅu ki·ªán √°p d·ª•ng

### Khi n√†o √°p d·ª•ng Auto Task Execution

- **B·∫ÆT BU·ªòC** c√≥ file `.kiro/specs/{project}/tasks.md` v·ªõi task list ƒë·∫ßy ƒë·ªß
- **B·∫ÆT BU·ªòC** tasks ph·∫£i c√≥ EARS requirements r√µ r√†ng (THE SYSTEM SHALL...)
- **B·∫ÆT BU·ªòC** ng∆∞·ªùi d√πng y√™u c·∫ßu "th·ª±c hi·ªán", "implement", "l√†m theo k·∫ø ho·∫°ch" ho·∫∑c t∆∞∆°ng t·ª±
- **B·∫ÆT BU·ªòC** c√°c Kiro task ph·∫£i c√≥ status "Not Started" v√† acceptance criteria r√µ r√†ng
- **B·∫ÆT BU·ªòC** kh√¥ng c√≥ task n√†o y√™u c·∫ßu input b·ªï sung t·ª´ ng∆∞·ªùi d√πng
- **B·∫ÆT BU·ªòC** dependencies c·ªßa task ƒë√£ ƒë∆∞·ª£c resolved ho·∫∑c completed
- **B·∫ÆT BU·ªòC** Context7 validation ƒë√£ pass cho architecture decisions

### Khi n√†o KH√îNG √°p d·ª•ng

- K·∫ø ho·∫°ch ch∆∞a ƒë·∫ßy ƒë·ªß ho·∫∑c thi·∫øu chi ti·∫øt
- C√≥ task y√™u c·∫ßu quy·∫øt ƒë·ªãnh t·ª´ ng∆∞·ªùi d√πng (v√≠ d·ª•: l·ª±a ch·ªçn design, API endpoints)
- Task c√≥ r·ªßi ro cao (x√≥a d·ªØ li·ªáu, thay ƒë·ªïi c·∫•u tr√∫c l·ªõn)
- Ng∆∞·ªùi d√πng ch·ªâ h·ªèi v·ªÅ k·∫ø ho·∫°ch m√† kh√¥ng y√™u c·∫ßu th·ª±c hi·ªán

## Quy tr√¨nh th·ª±c hi·ªán (Spec-Driven Enhanced)

### B∆∞·ªõc 0: Pre-Execution Analysis (NEW)

1. **Context Analysis**:
   - Load project context t·ª´ `.project-identity`
   - Analyze tech stack v√† existing patterns
   - Check for Context7 best practices
2. **Requirements Mapping**:
   - Map task IDs to EARS requirements
   - Identify acceptance criteria format
   - Check for ambiguous requirements

### B∆∞·ªõc 1: X√°c nh·∫≠n ƒëi·ªÅu ki·ªán (Enhanced)

1. Ki·ªÉm tra file `.kiro/specs/{project}/tasks.md` t·ªìn t·∫°i v√† c√≥ task list
2. Validate Kiro task format (ID, status, priority, dependencies, acceptance criteria)
3. **NEW**: Validate EARS requirements cho m·ªói task
4. **NEW**: Check import dependencies v·ªõi Import Analyzer
5. **NEW**: Validate async patterns v·ªõi Async Validator
6. X√°c ƒë·ªãnh task n√†o c√≥ th·ªÉ th·ª±c hi·ªán d·ª±a tr√™n dependencies
7. ƒê√°nh gi√° m·ª©c ƒë·ªô r·ªßi ro c·ªßa t·ª´ng task

### B∆∞·ªõc 2: Th√¥ng b√°o b·∫Øt ƒë·∫ßu

- Th√¥ng b√°o ng·∫Øn g·ªçn v·ªÅ vi·ªác b·∫Øt ƒë·∫ßu th·ª±c hi·ªán k·∫ø ho·∫°ch
- Li·ªát k√™ s·ªë l∆∞·ª£ng task s·∫Ω ƒë∆∞·ª£c th·ª±c hi·ªán
- Kh√¥ng y√™u c·∫ßu x√°c nh·∫≠n t·ª´ ng∆∞·ªùi d√πng

### B∆∞·ªõc 3: Th·ª±c hi·ªán v·ªõi Surgical Precision

#### Phase 1: Planning (Per Task)

```
1. Extract EARS requirement: "WHEN [trigger] THE SYSTEM SHALL [action]"
2. Break down into atomic sub-tasks
3. Identify files to be modified
4. Plan test scenarios
```

#### Phase 2: Reasoning (Document Before Action)

```
## Task: [TASK-ID] - [Description]
### Why:
- Business reason: [Why this task is needed]
- Technical reason: [Why this approach]

### How:
- Step 1: [Specific action with file:line]
- Step 2: [Specific action with file:line]

### Validation:
- [ ] Unit test covers the change
- [ ] Integration test if needed
- [ ] Manual test scenario
```

#### Phase 3: Taking Actions (ONE at a time)

- **ATOMIC RULE**: One file, one change, one commit
- Update task status: "Not Started" ‚Üí "In Progress"
- Execute the FIRST atomic change
- Validate the change works
- Commit with message: `feat(TASK-001): [specific change description]`
- Repeat for next atomic change

#### Phase 4: Evaluating Results

- Run tests after EACH atomic change
- Validate against acceptance criteria
- Check for side effects
- Update task status ‚Üí "Completed" only when ALL criteria pass
- Document any deviations or issues

### B∆∞·ªõc 4: B√°o c√°o k·∫øt qu·∫£

- T√≥m t·∫Øt nh·ªØng g√¨ ƒë√£ ho√†n th√†nh
- Li·ªát k√™ file ƒë√£ t·∫°o/ch·ªânh s·ª≠a
- Th√¥ng b√°o n·∫øu c√≥ task n√†o kh√¥ng th·ªÉ ho√†n th√†nh

## X·ª≠ l√Ω ngo·∫°i l·ªá (Spec-Driven Enhanced)

### Khi g·∫∑p l·ªói trong qu√° tr√¨nh th·ª±c hi·ªán

1. **Immediate Stop**: D·ª´ng ngay atomic action hi·ªán t·∫°i
2. **Root Cause Analysis**:

   ```
   Error Context:
   - Task: [TASK-ID]
   - Action: [Specific action that failed]
   - File: [file:line where error occurred]
   - Error: [Exact error message]

   Potential Causes:
   1. [Hypothesis 1]
   2. [Hypothesis 2]

   Attempted Fix:
   - [What was tried]
   - [Result]
   ```

3. **Recovery Options**:
   - Revert last atomic change
   - Try alternative approach
   - Mark task as blocked with reason
4. **User Communication**:
   - Explain what failed and why
   - Present recovery options
   - Ask for guidance if unclear

### Khi task y√™u c·∫ßu input b·ªï sung

- D·ª´ng v√† y√™u c·∫ßu input t·ª´ ng∆∞·ªùi d√πng
- Gi·∫£i th√≠ch r√µ c·∫ßn input g√¨ v√† t·∫°i sao
- Sau khi c√≥ input, ti·∫øp t·ª•c v·ªõi task hi·ªán t·∫°i

## Nguy√™n t·∫Øc an to√†n (Surgical Precision)

### File Protection

- **B·∫ÆT BU·ªòC** t·∫°o backup tr∆∞·ªõc khi x√≥a/thay ƒë·ªïi file quan tr·ªçng
- **B·∫ÆT BU·ªòC** ki·ªÉm tra file t·ªìn t·∫°i tr∆∞·ªõc khi thao t√°c
- **B·∫ÆT BU·ªòC** commit sau M·ªñI atomic change (kh√¥ng ph·∫£i sau task l·ªõn)
- **B·∫ÆT BU·ªòC** validate file syntax sau m·ªói edit
- **B·∫ÆT BU·ªòC** check for broken imports sau changes

### Atomic Change Rules

- **ONE FILE**: Ch·ªâ modify m·ªôt file per atomic action
- **ONE CONCEPT**: M·ªói change focus v√†o m·ªôt concept
- **REVERSIBLE**: M·ªçi change ph·∫£i d·ªÖ d√†ng revert
- **TESTABLE**: M·ªçi change ph·∫£i c√≥ th·ªÉ test ƒë·ªôc l·∫≠p

### Validation (Multi-Layer)

#### Syntax Validation (After EACH edit)

- Language-specific syntax check
- Import resolution validation
- Type checking (if applicable)

#### Semantic Validation (After EACH atomic change)

- Unit test for the specific change
- Integration test if interfaces changed
- Acceptance criteria partial check

#### System Validation (After task completion)

- Full acceptance criteria validation
- Cross-module integration tests
- Performance benchmarks if relevant
- Security validation if applicable

## V√≠ d·ª• s·ª≠ d·ª•ng (Spec-Driven)

### T√¨nh hu·ªëng 1: K·∫ø ho·∫°ch ƒë·∫ßy ƒë·ªß v·ªõi EARS

```
User: "Th·ª±c hi·ªán k·∫ø ho·∫°ch ƒë√£ l·∫≠p"

AI: "Ph√¢n t√≠ch k·∫ø ho·∫°ch v·ªõi Spec-Driven approach:

üìã T√¨m th·∫•y 5 tasks v·ªõi EARS requirements:
- TASK-001: WHEN user clicks login THE SYSTEM SHALL validate credentials
- TASK-002: THE SYSTEM SHALL hash passwords with bcrypt
...

üîç B·∫Øt ƒë·∫ßu v·ªõi TASK-001 (no dependencies):

## Planning TASK-001
EARS: WHEN user clicks login THE SYSTEM SHALL validate credentials
Atomic actions:
1. Create login form component
2. Add validation logic
3. Connect to auth service

## Reasoning
Why: Users need secure authentication
How: Implement form ‚Üí validation ‚Üí service integration

üî® Executing atomic action 1/3: Create login form..."

[Th·ª±c hi·ªán t·ª´ng atomic action v·ªõi validation]
```

### T√¨nh hu·ªëng 2: K·∫ø ho·∫°ch thi·∫øu chi ti·∫øt

```
User: "Implement theo plan"
AI: "K·∫ø ho·∫°ch hi·ªán t·∫°i thi·∫øu m·ªôt s·ªë chi ti·∫øt. T√¥i c·∫ßn l√†m r√µ..."
‚Üí Y√™u c·∫ßu b·ªï sung th√¥ng tin tr∆∞·ªõc
```

### T√¨nh hu·ªëng 3: Task c√≥ r·ªßi ro

```
User: "L√†m theo k·∫ø ho·∫°ch"
AI: "Task 3 s·∫Ω x√≥a database. B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ti·∫øp t·ª•c?"
‚Üí Y√™u c·∫ßu x√°c nh·∫≠n cho task r·ªßi ro cao
```

## Spec-Driven Integration Points

### Kiro Task System

- **B·∫ÆT BU·ªòC** s·ª≠ d·ª•ng [Kiro Task Execution](kiro-task-execution.mdc) l√†m engine ch√≠nh
- **B·∫ÆT BU·ªòC** tu√¢n th·ªß Kiro task format v√† validation rules
- **B·∫ÆT BU·ªòC** c·∫≠p nh·∫≠t task status trong `.kiro/specs/{project}/tasks.md`

### Planning Workflow

- **B·∫ÆT BU·ªòC** s·ª≠ d·ª•ng [Planning Workflow](planning-workflow.mdc) ƒë·ªÉ ƒë·∫£m b·∫£o k·∫ø ho·∫°ch ch·∫•t l∆∞·ª£ng
- **B·∫ÆT BU·ªòC** √°p d·ª•ng [Planning Validation Rules](planning-validation-rules.mdc) ƒë·ªÉ validate tr∆∞·ªõc khi th·ª±c hi·ªán
- **B·∫ÆT BU·ªòC** tu√¢n th·ªß [Planning Enforcement](planning-enforcement.mdc) trong qu√° tr√¨nh th·ª±c hi·ªán

### File Protection Rules

- **B·∫ÆT BU·ªòC** tu√¢n th·ªß [File Protection Rules](file-protection-rules.mdc) cho m·ªçi thao t√°c file
- **B·∫ÆT BU·ªòC** √°p d·ª•ng backup strategy tr∆∞·ªõc nh·ªØng thay ƒë·ªïi l·ªõn

### Development Control

- **B·∫ÆT BU·ªòC** theo [Development Control Rules](development-control-rules.mdc) ƒë·ªÉ ki·ªÉm so√°t quy tr√¨nh
- **B·∫ÆT BU·ªòC** ƒë·∫£m b·∫£o code quality theo [Development Rules](development-rules.mdc)
- **B·∫ÆT BU·ªòC** apply [Import Analyzer](import-analyzer.mdc) sau m·ªói file change
- **B·∫ÆT BU·ªòC** apply [Async Validator](async-validator.mdc) cho async code
- **B·∫ÆT BU·ªòC** use [Context Generator](context-generator.mdc) ƒë·ªÉ maintain context
- **KHUY·∫æN NGH·ªä** s·ª≠ d·ª•ng [User Intent Analysis Workflow](user-intent-analysis-workflow.mdc) ƒë·ªÉ hi·ªÉu r√µ y√™u c·∫ßu tr∆∞·ªõc khi th·ª±c hi·ªán

## Metrics v√† Tracking (Spec-Driven Metrics)

### Execution Metrics

- **Planning Time**: Th·ªùi gian ph√¢n t√≠ch requirements
- **Reasoning Time**: Th·ªùi gian document quy·∫øt ƒë·ªãnh
- **Execution Time**: Th·ªùi gian th·ª±c hi·ªán per atomic action
- **Validation Time**: Th·ªùi gian ki·ªÉm tra k·∫øt qu·∫£
- **Atomic Actions per Task**: S·ªë l∆∞·ª£ng atomic changes
- **First-Time Success Rate**: T·ª∑ l·ªá atomic action th√†nh c√¥ng l·∫ßn ƒë·∫ßu
- **Rollback Frequency**: T·∫ßn su·∫•t ph·∫£i revert changes

### Quality Metrics

- **Requirements Coverage**: % EARS requirements ƒë∆∞·ª£c implement
- **Test Coverage**: % code ƒë∆∞·ª£c test
- **Defect Density**: Bugs per task
- **Technical Debt**: Accumulated per sprint

### Continuous Improvement

- Track patterns of failed atomic actions
- Identify common reasoning gaps
- Optimize validation strategies
- Update EARS templates based on clarity issues

## Spec-Driven Execution Checklist

### Before Starting Any Task

- [ ] EARS requirement is clear and unambiguous
- [ ] Dependencies are resolved
- [ ] Test scenarios are defined
- [ ] Atomic actions are planned

### During Execution

- [ ] Document reasoning before each action
- [ ] Execute ONE atomic change
- [ ] Validate the change
- [ ] Commit with descriptive message
- [ ] Check for side effects

### After Task Completion

- [ ] All acceptance criteria met
- [ ] Tests are passing
- [ ] Documentation updated
- [ ] No technical debt introduced

---

**Spec-Driven Commitment**: This rule implements surgical precision through the spec-driven loop of Planning ‚Üí Reasoning ‚Üí Taking Actions ‚Üí Evaluating Results. Every action is atomic, documented, and validated. Quality and safety are never compromised for speed.
