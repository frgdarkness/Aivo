---
description: Codebase Analysis Workflow - Quy tr√¨nh ph√¢n t√≠ch m√£ c∆° s·ªü v√† l·∫≠p k·∫ø ho·∫°ch ph√°t tri·ªÉn c√≥ c·∫•u tr√∫c. K√≠ch ho·∫°t khi working v·ªõi code analysis, project planning, ho·∫∑c structured development workflows.
alwaysApply: false
---
# Universal Codebase Analysis & Planning Workflow

**Version**: 2.0  
**Created**: 2024-12-19  
**Updated**: 2024-12-19  
**Purpose**: Quy tr√¨nh ph√¢n t√≠ch m√£ c∆° s·ªü v√† l·∫≠p k·∫ø ho·∫°ch ph√°t tri·ªÉn t·ª± ƒë·ªông cho m·ªçi lo·∫°i project

## üéØ Workflow Overview

Workflow n√†y t·ª± ƒë·ªông h√≥a quy tr√¨nh ph√¢n t√≠ch codebase v√† l·∫≠p k·∫ø ho·∫°ch ph√°t tri·ªÉn th√¥ng qua 4 b∆∞·ªõc ch√≠nh:

1. **Qu√©t v√† ph√¢n t√≠ch m√£ c∆° s·ªü** ‚Üí T·∫°o file `.md` trong `code_base/context/`
2. **L·∫≠p k·∫ø ho·∫°ch ph√°t tri·ªÉn** ‚Üí T·∫°o file `.md` trong `code_base/plan/`
3. **Review v√† r√† so√°t** ‚Üí T·ªëi ∆∞u h√≥a k·∫ø ho·∫°ch
4. **X√°c nh·∫≠n v√† th·ª±c hi·ªán** ‚Üí Ng∆∞·ªùi d√πng xem t·ªïng quan v√† quy·∫øt ƒë·ªãnh

## üèóÔ∏è Project Type Detection

Tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu ph√¢n t√≠ch, AI ph·∫£i x√°c ƒë·ªãnh lo·∫°i project ƒë·ªÉ √°p d·ª•ng quy tr√¨nh ph√π h·ª£p:

### Supported Project Types

- **Mobile**: Android, iOS, React Native, Flutter
- **Web**: Frontend (React, Vue, Angular), Backend (Node.js, Python, Java)
- **Desktop**: Electron, .NET, Java Swing/JavaFX
- **AI/ML**: Python ML, TensorFlow, PyTorch
- **Game**: Unity, Unreal Engine, Godot
- **DevOps**: Infrastructure, CI/CD, Monitoring
- **Library/Framework**: NPM packages, Python packages, etc.

### Detection Method

```
1. Check project files:
   - package.json ‚Üí Web/Node.js
   - build.gradle.kts ‚Üí Android
   - Podfile/xcodeproj ‚Üí iOS
   - requirements.txt/pyproject.toml ‚Üí Python
   - Cargo.toml ‚Üí Rust
   - go.mod ‚Üí Go
   - etc.

2. Check folder structure:
   - app/src/main/java ‚Üí Android
   - src/components ‚Üí React/Vue
   - Assets/Scripts ‚Üí Unity
   - etc.

3. Apply appropriate specialized workflow
```

## üìã Core Principles

### 1. Universal Compatibility

- **Multi-platform**: H·ªó tr·ª£ m·ªçi lo·∫°i project v√† technology stack
- **Adaptive**: T·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh theo ƒë·∫∑c th√π c·ªßa t·ª´ng project type
- **Extensible**: D·ªÖ d√†ng th√™m support cho technology m·ªõi
- **Consistent**: C√πng m·ªôt quy tr√¨nh c∆° b·∫£n cho m·ªçi project

### 2. Comprehensive Analysis

- **To√†n di·ªán**: Qu√©t t·∫•t c·∫£ files, folders, dependencies
- **S√¢u s·∫Øc**: Ph√¢n t√≠ch architecture, patterns, code quality
- **Contextual**: Hi·ªÉu m·ª•c ƒë√≠ch v√† business logic c·ªßa project
- **Technology-aware**: √Åp d·ª•ng best practices cho t·ª´ng technology

### 3. Intelligent Planning

- **Data-driven**: D·ª±a tr√™n k·∫øt qu·∫£ ph√¢n t√≠ch th·ª±c t·∫ø
- **Type-specific**: K·∫ø ho·∫°ch ph√π h·ª£p v·ªõi lo·∫°i project
- **Prioritized**: S·∫Øp x·∫øp theo ƒë·ªô ∆∞u ti√™n v√† impact
- **Realistic**: Timeline v√† resources kh·∫£ thi

### 4. Seamless Integration

- **Workflow Integration**: T√≠ch h·ª£p v·ªõi existing workflows
- **Tool Integration**: S·ª≠ d·ª•ng existing tools v√† scripts
- **Process Integration**: Ph√π h·ª£p v·ªõi development process hi·ªán t·∫°i

## Nguy√™n T·∫Øc C∆° B·∫£n

- **_B·∫ÆT BU·ªòC_** th·ª±c hi·ªán qu√©t v√† ph√¢n t√≠ch to√†n b·ªô m√£ c∆° s·ªü tr∆∞·ªõc khi l·∫≠p k·∫ø ho·∫°ch
- **_B·∫ÆT BU·ªòC_** t·∫°o t√†i li·ªáu context chi ti·∫øt trong `code_base/context/`
- **_B·∫ÆT BU·ªòC_** l·∫≠p k·∫ø ho·∫°ch d·ª±a tr√™n ph√¢n t√≠ch m√£ c∆° s·ªü trong `code_base/plan/`
- **_B·∫ÆT BU·ªòC_** th·ª±c hi·ªán review v√† r√† so√°t tr∆∞·ªõc khi ƒë∆∞a ra k·∫ø ho·∫°ch cu·ªëi c√πng
- **_B·∫ÆT BU·ªòC_** cung c·∫•p deep links ƒë·ªÉ ng∆∞·ªùi d√πng c√≥ th·ªÉ ƒëi·ªÅu h∆∞·ªõng ƒë·∫øn ng·ªØ c·∫£nh m√£ li√™n quan
- **_B·∫ÆT BU·ªòC_** ch·ªù x√°c nh·∫≠n t·ª´ ng∆∞·ªùi d√πng tr∆∞·ªõc khi th·ª±c hi·ªán k·∫ø ho·∫°ch
- **_NGHI√äM C·∫§M_** b·∫Øt ƒë·∫ßu development khi ch∆∞a ho√†n th√†nh quy tr√¨nh ph√¢n t√≠ch

## Universal Workflow Process

### B∆∞·ªõc 1: Project Detection & Codebase Analysis

**M·ª•c ti√™u**: X√°c ƒë·ªãnh lo·∫°i project v√† thu th·∫≠p ph√¢n t√≠ch to√†n di·ªán codebase hi·ªán t·∫°i

#### 1.1 Project Type Detection

- **_B·∫ÆT BU·ªòC_** scan project root files (package.json, build.gradle.kts, Podfile, requirements.txt, etc.)
- **_B·∫ÆT BU·ªòC_** x√°c ƒë·ªãnh primary technology stack v√† project category
- **_B·∫ÆT BU·ªòC_** identify project type (Mobile/Web/Desktop/AI/Game/DevOps/Library)
- **_B·∫ÆT BU·ªòC_** apply specialized analysis rules cho t·ª´ng project type

#### 1.2 Universal Codebase Scanning

- **_B·∫ÆT BU·ªòC_** qu√©t to√†n b·ªô c·∫•u tr√∫c th∆∞ m·ª•c v√† file theo project type
- **_B·∫ÆT BU·ªòC_** ph√¢n t√≠ch tech stack v√† dependencies ph√π h·ª£p v·ªõi technology
- **_B·∫ÆT BU·ªòC_** x√°c ƒë·ªãnh patterns v√† conventions theo best practices c·ªßa platform
- **_B·∫ÆT BU·ªòC_** check for project-specific configurations v√† build tools

#### 1.3 Technology-Aware Architecture Analysis

- **_B·∫ÆT BU·ªòC_** x√°c ƒë·ªãnh architecture pattern ph√π h·ª£p v·ªõi project type
- **_B·∫ÆT BU·ªòC_** ph√¢n t√≠ch data flow v√† dependencies theo technology stack
- **_B·∫ÆT BU·ªòC_** x√°c ƒë·ªãnh c√°c modules v√† components ch√≠nh theo platform conventions
- **_B·∫ÆT BU·ªòC_** ph√¢n t√≠ch integration points, APIs v√† platform-specific features

#### 1.4 Comprehensive Quality Assessment

- **_B·∫ÆT BU·ªòC_** ph√¢n t√≠ch code conventions v√† style theo technology standards
- **_B·∫ÆT BU·ªòC_** x√°c ƒë·ªãnh technical debt v√† technology-specific code smells
- **_B·∫ÆT BU·ªòC_** ƒë√°nh gi√° test coverage v√† testing strategy cho platform
- **_B·∫ÆT BU·ªòC_** ph√¢n t√≠ch performance v√† security considerations theo technology

#### 1.5 Universal Context Documentation

- **_B·∫ÆT BU·ªòC_** t·∫°o th∆∞ m·ª•c `code_base/context/` n·∫øu ch∆∞a c√≥
- **_B·∫ÆT BU·ªòC_** t·∫°o file `CodebaseAnalysis_[ProjectName]_[Date].md` v·ªõi universal template
- **_B·∫ÆT BU·ªòC_** bao g·ªìm deep links ƒë·∫øn c√°c file v√† functions c·ª• th·ªÉ
- **_B·∫ÆT BU·ªòC_** t·∫°o technology-specific insights v√† recommendations
- **_B·∫ÆT BU·ªòC_** document platform capabilities v√† limitations

### B∆∞·ªõc 2: Universal Development Planning

**M·ª•c ti√™u**: T·∫°o technology-specific development plan d·ª±a tr√™n analysis

#### 2.1 Technology-Aware Requirements Analysis

- **_B·∫ÆT BU·ªòC_** x√°c ƒë·ªãnh features c·∫ßn implement theo platform capabilities
- **_B·∫ÆT BU·ªòC_** prioritize theo business value v√† technology-specific complexity
- **_B·∫ÆT BU·ªòC_** estimate effort d·ª±a tr√™n technology stack v√† team expertise
- **_B·∫ÆT BU·ªòC_** identify platform-specific dependencies v√† blockers

#### 2.2 Platform-Specific Solution Design

- **_B·∫ÆT BU·ªòC_** design architecture changes theo best practices c·ªßa technology
- **_B·∫ÆT BU·ªòC_** plan implementation approach ph√π h·ª£p v·ªõi platform conventions
- **_B·∫ÆT BU·ªòC_** define testing strategy theo technology testing frameworks
- **_B·∫ÆT BU·ªòC_** plan deployment strategy cho target platforms

#### 2.3 Universal Development Plan Creation

- **_B·∫ÆT BU·ªòC_** t·∫°o th∆∞ m·ª•c `code_base/plan/` n·∫øu ch∆∞a c√≥
- **_B·∫ÆT BU·ªòC_** t·∫°o file `DevelopmentPlan_[FeatureName]_[Date].md` v·ªõi technology-specific sections
- **_B·∫ÆT BU·ªòC_** include detailed timeline v·ªõi technology-appropriate milestones
- **_B·∫ÆT BU·ªòC_** define success criteria v√† platform-specific acceptance criteria
- **_B·∫ÆT BU·ªòC_** include technology ecosystem considerations (libraries, tools, etc.)

### B∆∞·ªõc 3: Universal Review & Optimization

**M·ª•c ti√™u**: Validate v√† optimize development plan theo technology best practices

#### 3.1 Technology-Specific Technical Review

- **_B·∫ÆT BU·ªòC_** review architecture design theo platform best practices
- **_B·∫ÆT BU·ªòC_** validate technical feasibility v·ªõi technology constraints
- **_B·∫ÆT BU·ªòC_** check compliance v·ªõi platform standards v√† conventions
- **_B·∫ÆT BU·ªòC_** assess performance implications cho target platforms

#### 3.2 Platform Risk Assessment

- **_B·∫ÆT BU·ªòC_** review technology-specific risks v√† mitigation strategies
- **_B·∫ÆT BU·ªòC_** assess timeline realism d·ª±a tr√™n technology complexity
- **_B·∫ÆT BU·ªòC_** validate resource requirements cho technology stack
- **_B·∫ÆT BU·ªòC_** check for platform-specific dependencies v√† limitations

#### 3.3 Cross-Platform Plan Optimization

- **_B·∫ÆT BU·ªòC_** optimize timeline theo technology development cycles
- **_B·∫ÆT BU·ªòC_** refine implementation approach cho platform efficiency
- **_B·∫ÆT BU·ªòC_** improve technology-specific risk mitigation
- **_B·∫ÆT BU·ªòC_** enhance testing strategies cho target platforms

#### 3.4 Universal Final Plan Creation

- **_B·∫ÆT BU·ªòC_** t·∫°o file `FinalPlan_[FeatureName]_[Date].md` v·ªõi technology insights
- **_B·∫ÆT BU·ªòC_** consolidate analysis v√† planning v·ªõi platform considerations
- **_B·∫ÆT BU·ªòC_** include executive summary v·ªõi technology impact assessment
- **_B·∫ÆT BU·ªòC_** provide clear go/no-go criteria cho t·ª´ng platform target

### B∆∞·ªõc 4: Universal Confirmation & Execution

**M·ª•c ti√™u**: Present technology-optimized plan cho user confirmation v√† execute

#### 4.1 Technology-Aware Plan Presentation

- **_B·∫ÆT BU·ªòC_** t·∫°o comprehensive overview v·ªõi platform-specific insights
- **_B·∫ÆT BU·ªòC_** highlight technology decisions v√† platform trade-offs
- **_B·∫ÆT BU·ªòC_** provide clear next steps cho t·ª´ng technology component
- **_B·∫ÆT BU·ªòC_** include platform-appropriate timeline v·ªõi technology milestones

#### 4.2 Cross-Platform User Confirmation

- **_B·∫ÆT BU·ªòC_** wait for explicit user approval cho t·ª´ng platform target
- **_B·∫ÆT BU·ªòC_** address technology-specific concerns ho·∫∑c modifications
- **_B·∫ÆT BU·ªòC_** confirm platform resource availability v√† technology timeline
- **_B·∫ÆT BU·ªòC_** finalize scope cho t·ª´ng technology stack

#### 4.3 Platform-Optimized Implementation Execution

- **_B·∫ÆT BU·ªòC_** execute theo technology-specific approved plan
- **_B·∫ÆT BU·ªòC_** maintain progress tracking cho t·ª´ng platform
- **_B·∫ÆT BU·ªòC_** provide technology-aware regular updates
- **_B·∫ÆT BU·ªòC_** handle platform issues theo technology escalation process

#### 4.4 Universal Documentation & Technology Handover

- **_B·∫ÆT BU·ªòC_** update documentation v·ªõi platform implementation details
- **_B·∫ÆT BU·ªòC_** create technology-specific knowledge transfer materials
- **_B·∫ÆT BU·ªòC_** provide platform maintenance guidelines
- **_B·∫ÆT BU·ªòC_** archive project artifacts theo technology organization structure

## File Templates

### Universal CodebaseAnalysis Template

```markdown
# Universal Codebase Analysis: [Project Name]

**Generated**: [Date]
**Analyzer**: AI Assistant
**Technology Stack**: [Detected Technologies]
**Project Type**: [Mobile/Web/Desktop/AI-ML/Game/DevOps/Library]
**Scope**: [Full/Partial] Analysis

## üìã Executive Summary

- **Project Type**: [Android/iOS/Web/Backend/etc.]
- **Tech Stack**: [Main technologies]
- **Platform Targets**: [Target platforms]
- **Architecture**: [Pattern used]
- **Code Quality**: [Rating/Assessment]
- **Technology Readiness**: [Assessment]
- **Cross-Platform Compatibility**: [Assessment]

## üèóÔ∏è Project Structure

### Directory Overview
```

[Directory tree with annotations]

```

### Key Components
| Component | Location | Purpose | Dependencies |
|-----------|----------|---------|-------------|
| [Component1] | [üìÅ path/to/component](path/to/component) | [Purpose] | [Dependencies] |
| [Component2] | [üìÅ path/to/component](path/to/component) | [Purpose] | [Dependencies] |

## üîß Technical Analysis
### Architecture Pattern
- **Pattern**: [MVC/MVP/MVVM/Clean/etc.]
- **Implementation**: [How it's implemented]
- **Compliance**: [How well it follows the pattern]

### Dependencies & Libraries
| Library | Version | Purpose | Update Status |
|---------|---------|---------|---------------|
| [Library1] | [Version] | [Purpose] | [‚úÖ/‚ö†Ô∏è/‚ùå] |
| [Library2] | [Version] | [Purpose] | [‚úÖ/‚ö†Ô∏è/‚ùå] |

### Data Flow
```

[Data flow diagram or description]

```

## üìä Code Quality Assessment
### Strengths
- ‚úÖ [Strength 1]
- ‚úÖ [Strength 2]

### Areas for Improvement
- ‚ö†Ô∏è [Issue 1] - [üìÑ Location](path/to/file#line)
- ‚ö†Ô∏è [Issue 2] - [üìÑ Location](path/to/file#line)

### Technical Debt
- üî¥ [High Priority] - [üìÑ Location](path/to/file#line)
- üü° [Medium Priority] - [üìÑ Location](path/to/file#line)

## üß™ Testing Strategy
### Current State
- **Unit Tests**: [Coverage/Status]
- **Integration Tests**: [Coverage/Status]
- **E2E Tests**: [Coverage/Status]

### Test Files
- [üìÑ Test File 1](path/to/test) - [Coverage]
- [üìÑ Test File 2](path/to/test) - [Coverage]

## üîó Integration Points
### APIs & External Services
| Service | Integration Point | Status |
|---------|------------------|--------|
| [Service1] | [üìÑ File](path/to/file) | [Status] |
| [Service2] | [üìÑ File](path/to/file) | [Status] |

### Database Schema
- **Type**: [Database type]
- **Schema**: [üìÑ Schema File](path/to/schema)
- **Migrations**: [üìÅ Migrations](path/to/migrations)

## üöÄ Deployment & Build
### Build Configuration
- **Build Files**: [üìÑ Build File](path/to/build)
- **Environment**: [Development/Staging/Production]
- **CI/CD**: [Status/Configuration]

### Deployment Strategy
- **Platform**: [Platform details]
- **Process**: [Deployment process]
- **Monitoring**: [Monitoring setup]

## üí° Recommendations
### Immediate Actions
1. [Recommendation 1] - [üìÑ Related Code](path/to/code)
2. [Recommendation 2] - [üìÑ Related Code](path/to/code)

### Long-term Improvements
1. [Improvement 1]
2. [Improvement 2]

## üîç Deep Dive Sections
### [üìÇ Core Module Analysis](./deep-dive/core-module.md)
### [üìÇ API Layer Analysis](./deep-dive/api-layer.md)
### [üìÇ Data Layer Analysis](./deep-dive/data-layer.md)
### [üìÇ UI Layer Analysis](./deep-dive/ui-layer.md)

---
*Generated by AI Assistant - [Timestamp]*
```

### Universal DevelopmentPlan Template

```markdown
# Universal Development Plan: [Feature Name]

**Created**: [Date]
**Based on**: [CodebaseAnalysis file]
**Technology Stack**: [Target Technologies]
**Platform Targets**: [Target Platforms]
**Estimated Duration**: [Timeline]
**Complexity**: [Simple/Medium/Complex/Very Complex]

## üìã Overview

### Feature Description

[Detailed description of what needs to be built]

### Success Criteria

- [ ] [Criteria 1]
- [ ] [Criteria 2]
- [ ] [Criteria 3]

### Impact Analysis

- **Affected Components**: [List of components]
- **Breaking Changes**: [Yes/No - Details]
- **Migration Required**: [Yes/No - Details]

## üéØ Implementation Strategy

### Approach

[Chosen approach and rationale]

### Architecture Integration

- **Fits Pattern**: [How it fits current architecture]
- **New Components**: [Components to be created]
- **Modified Components**: [Components to be modified]

### Technology Decisions

| Decision    | Rationale   | Alternative Considered |
| ----------- | ----------- | ---------------------- |
| [Decision1] | [Rationale] | [Alternative]          |
| [Decision2] | [Rationale] | [Alternative]          |

## üìÖ Implementation Phases

### Phase 1: Foundation (Week 1)

**Goal**: Set up basic structure and core functionality

#### Tasks

- [ ] **Setup** - [üìÑ Config File](path/to/config) - [2h]

  - Create project structure
  - Configure dependencies
  - Setup build configuration

- [ ] **Core Models** - [üìÅ Models Directory](path/to/models) - [4h]

  - Define data models
  - Create validation logic
  - Setup serialization

- [ ] **Basic API** - [üìÑ API File](path/to/api) - [6h]
  - Create endpoint structure
  - Implement basic CRUD
  - Add error handling

#### Deliverables

- ‚úÖ Basic project structure
- ‚úÖ Core data models
- ‚úÖ Basic API endpoints

### Phase 2: Core Features (Week 2-3)

**Goal**: Implement main functionality

#### Tasks

- [ ] **Business Logic** - [üìÅ Services](path/to/services) - [8h]

  - Implement core algorithms
  - Add validation rules
  - Create service layer

- [ ] **Database Integration** - [üìÑ Database](path/to/db) - [6h]

  - Create database schema
  - Implement data access layer
  - Add migration scripts

- [ ] **UI Components** - [üìÅ Components](path/to/components) - [10h]
  - Create reusable components
  - Implement main screens
  - Add navigation logic

#### Deliverables

- ‚úÖ Working business logic
- ‚úÖ Database integration
- ‚úÖ Basic UI implementation

### Phase 3: Integration & Polish (Week 4)

**Goal**: Integration, testing, and refinement

#### Tasks

- [ ] **Integration Testing** - [üìÅ Tests](path/to/tests) - [6h]

  - Write integration tests
  - Test API endpoints
  - Validate data flow

- [ ] **UI/UX Polish** - [üìÅ UI](path/to/ui) - [8h]

  - Improve user experience
  - Add loading states
  - Implement error handling

- [ ] **Performance Optimization** - [üìÑ Performance](path/to/perf) - [4h]
  - Optimize database queries
  - Improve API response times
  - Add caching where needed

#### Deliverables

- ‚úÖ Comprehensive test suite
- ‚úÖ Polished user interface
- ‚úÖ Optimized performance

## üîó Code References

### Files to Modify

- [üìÑ Main Controller](path/to/controller) - Add new endpoints
- [üìÑ Service Layer](path/to/service) - Implement business logic
- [üìÑ Database Model](path/to/model) - Add new entities
- [üìÑ UI Component](path/to/component) - Create new views

### Files to Create

- [üìÑ New Feature Service](path/to/new-service) - Core feature logic
- [üìÑ New Data Model](path/to/new-model) - Data structure
- [üìÑ New UI Screen](path/to/new-screen) - User interface
- [üìÑ New Test Suite](path/to/new-tests) - Test coverage

### Dependencies

- [üìÑ Existing Service A](path/to/service-a) - Required for integration
- [üìÑ Existing Model B](path/to/model-b) - Data dependency
- [üìÑ Existing Component C](path/to/component-c) - UI dependency

## ‚ö†Ô∏è Risk Assessment

### Technical Risks

| Risk    | Probability    | Impact         | Mitigation |
| ------- | -------------- | -------------- | ---------- |
| [Risk1] | [High/Med/Low] | [High/Med/Low] | [Strategy] |
| [Risk2] | [High/Med/Low] | [High/Med/Low] | [Strategy] |

### Dependencies & Blockers

- **External Dependencies**: [List]
- **Team Dependencies**: [List]
- **Technical Blockers**: [List]

## üß™ Testing Strategy

### Test Plan

- **Unit Tests**: [üìÅ Unit Tests](path/to/unit-tests)
- **Integration Tests**: [üìÅ Integration Tests](path/to/integration-tests)
- **E2E Tests**: [üìÅ E2E Tests](path/to/e2e-tests)

### Test Coverage Goals

- **Minimum Coverage**: 80%
- **Critical Path Coverage**: 100%
- **Edge Cases**: Covered

## üöÄ Deployment Plan

### Deployment Strategy

- **Environment**: [Staging ‚Üí Production]
- **Rollout**: [Gradual/Full]
- **Rollback Plan**: [Strategy]

### Monitoring

- **Metrics**: [Key metrics to monitor]
- **Alerts**: [Alert conditions]
- **Logging**: [Logging strategy]

## üìö Documentation

### Required Documentation

- [ ] API Documentation
- [ ] User Guide
- [ ] Technical Documentation
- [ ] Deployment Guide

### Knowledge Transfer

- [ ] Code walkthrough session
- [ ] Documentation review
- [ ] Q&A session

---

_Generated by AI Assistant - [Timestamp]_
```

### Universal FinalPlan Template

```markdown
# Universal Final Implementation Plan: [Feature Name]

**Created**: [Date]
**Technology Stack**: [Target Technologies]
**Platform Targets**: [Target Platforms]
**Review Status**: ‚úÖ Approved / ‚è≥ Pending / ‚ùå Needs Revision
**Implementation Ready**: [Yes/No]

## üéØ Executive Summary

### What We're Building

[Clear, concise description]

### Why It Matters

[Business value and user impact]

### How We'll Build It

[High-level approach]

### When It'll Be Done

[Timeline and milestones]

## üó∫Ô∏è Navigation Guide

_Click any link below to dive deeper into specific areas_

### üìä Analysis & Research

- [üìÑ Codebase Analysis](../context/CodebaseAnalysis_[ProjectName]_[Date].md)
- [üìÑ Technical Requirements](../context/technical-requirements.md)
- [üìÑ Architecture Review](../context/architecture-review.md)

### üìã Planning Documents

- [üìÑ Development Plan](./DevelopmentPlan_[FeatureName]_[Date].md)
- [üìÑ Risk Assessment](./risk-assessment.md)
- [üìÑ Testing Strategy](./testing-strategy.md)

### üîç Code References

- [üìÅ Core Components](../../src/core/) - Main business logic
- [üìÅ API Layer](../../src/api/) - Service endpoints
- [üìÅ Data Models](../../src/models/) - Data structures
- [üìÅ UI Components](../../src/ui/) - User interface

## üö¶ Implementation Options

_Choose your preferred approach_

### Option A: Incremental Implementation (Recommended)

**Timeline**: 4 weeks | **Risk**: Low | **Effort**: Medium

**Pros**:

- ‚úÖ Lower risk of breaking existing functionality
- ‚úÖ Easier to test and validate each step
- ‚úÖ Can deliver value incrementally

**Cons**:

- ‚ö†Ô∏è Takes longer to complete
- ‚ö†Ô∏è Requires more coordination

[üìÑ Detailed Plan](./incremental-plan.md)

### Option B: Big Bang Implementation

**Timeline**: 2 weeks | **Risk**: High | **Effort**: High

**Pros**:

- ‚úÖ Faster completion
- ‚úÖ Less coordination overhead
- ‚úÖ Cleaner final result

**Cons**:

- ‚ùå Higher risk of breaking changes
- ‚ùå Harder to test incrementally
- ‚ùå All-or-nothing delivery

[üìÑ Detailed Plan](./bigbang-plan.md)

### Option C: Hybrid Approach

**Timeline**: 3 weeks | **Risk**: Medium | **Effort**: Medium

**Pros**:

- ‚úÖ Balanced risk and speed
- ‚úÖ Some incremental delivery
- ‚úÖ Manageable complexity

**Cons**:

- ‚ö†Ô∏è Requires careful planning
- ‚ö†Ô∏è More complex coordination

[üìÑ Detailed Plan](./hybrid-plan.md)

## üìÖ Recommended Timeline

### Week 1: Foundation

- [üìÑ Setup Tasks](./week1-tasks.md)
- **Deliverable**: Basic structure and core models
- **Review Point**: Architecture validation

### Week 2-3: Core Development

- [üìÑ Development Tasks](./week2-3-tasks.md)
- **Deliverable**: Working feature implementation
- **Review Point**: Functionality validation

### Week 4: Integration & Testing

- [üìÑ Testing Tasks](./week4-tasks.md)
- **Deliverable**: Production-ready feature
- **Review Point**: Quality assurance

## üéõÔ∏è Interactive Decision Points

_These are points where you'll need to make decisions during implementation_

### Decision Point 1: Database Schema

**When**: Week 1, Day 2
**Options**:

- [üìÑ Option A: Extend existing tables](./db-option-a.md)
- [üìÑ Option B: Create new tables](./db-option-b.md)
- [üìÑ Option C: Hybrid approach](./db-option-c.md)

### Decision Point 2: API Design

**When**: Week 1, Day 4
**Options**:

- [üìÑ REST API](./api-rest.md)
- [üìÑ GraphQL API](./api-graphql.md)
- [üìÑ Hybrid API](./api-hybrid.md)

### Decision Point 3: UI Framework

**When**: Week 2, Day 1
**Options**:

- [üìÑ Use existing components](./ui-existing.md)
- [üìÑ Create new components](./ui-new.md)
- [üìÑ Third-party library](./ui-library.md)

## üîß Technical Deep Dives

_For developers who want to understand the technical details_

### Architecture

- [üìÑ System Architecture](./architecture/system-design.md)
- [üìÑ Data Flow](./architecture/data-flow.md)
- [üìÑ Component Interaction](./architecture/component-interaction.md)

### Implementation Details

- [üìÑ Core Algorithms](./implementation/algorithms.md)
- [üìÑ Database Design](./implementation/database.md)
- [üìÑ API Specification](./implementation/api-spec.md)
- [üìÑ UI/UX Guidelines](./implementation/ui-guidelines.md)

### Code Examples

- [üìÑ Service Implementation](./examples/service-example.md)
- [üìÑ Model Definition](./examples/model-example.md)
- [üìÑ Component Usage](./examples/component-example.md)
- [üìÑ Test Cases](./examples/test-examples.md)

## ‚ö° Quick Start Guide

_For immediate implementation_

### Prerequisites Checklist

- [ ] [üìÑ Development Environment](./setup/dev-environment.md)
- [ ] [üìÑ Required Dependencies](./setup/dependencies.md)
- [ ] [üìÑ Database Setup](./setup/database.md)
- [ ] [üìÑ Configuration](./setup/configuration.md)

### First Steps

1. **Clone and Setup** - [üìÑ Setup Guide](./setup/clone-setup.md)
2. **Run Tests** - [üìÑ Testing Guide](./setup/run-tests.md)
3. **Start Development** - [üìÑ Dev Guide](./setup/start-dev.md)

## üö® Important Considerations

### Breaking Changes

- [üìÑ Impact Analysis](./considerations/breaking-changes.md)
- [üìÑ Migration Guide](./considerations/migration.md)
- [üìÑ Rollback Plan](./considerations/rollback.md)

### Performance Impact

- [üìÑ Performance Analysis](./considerations/performance.md)
- [üìÑ Optimization Strategies](./considerations/optimization.md)
- [üìÑ Monitoring Plan](./considerations/monitoring.md)

### Security Considerations

- [üìÑ Security Review](./considerations/security.md)
- [üìÑ Authentication](./considerations/auth.md)
- [üìÑ Data Protection](./considerations/data-protection.md)

## ‚úÖ Ready to Proceed?

### Final Checklist

- [ ] I understand the scope and requirements
- [ ] I've reviewed the technical approach
- [ ] I've chosen an implementation option
- [ ] I understand the timeline and milestones
- [ ] I'm aware of the risks and mitigation strategies
- [ ] I have access to all necessary resources

### Next Steps

1. **Confirm Implementation Option**: [A/B/C]
2. **Set Start Date**: [Date]
3. **Assign Team Members**: [Team]
4. **Schedule Review Points**: [Dates]

---

## ü§ù Approval Section

**Technical Lead Approval**: ‚è≥ Pending
**Product Owner Approval**: ‚è≥ Pending
**Implementation Ready**: ‚ùå Not Ready

**Comments/Feedback**:
[Space for stakeholder feedback]

---

_Generated by AI Assistant - [Timestamp]_
_Last Updated: [Date] by [Person]_
```

## Integration v·ªõi Workflows Hi·ªán T·∫°i

### K·∫øt H·ª£p v·ªõi Brainstorm Workflow

- **_B·∫ÆT BU·ªòC_** th·ª±c hi·ªán brainstorm tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu codebase analysis
- **_B·∫ÆT BU·ªòC_** s·ª≠ d·ª•ng k·∫øt qu·∫£ brainstorm l√†m input cho analysis
- **_B·∫ÆT BU·ªòC_** reference brainstorm file trong analysis document

### K·∫øt H·ª£p v·ªõi Planning Workflow

- **_B·∫ÆT BU·ªòC_** s·ª≠ d·ª•ng codebase analysis l√†m foundation cho planning
- **_B·∫ÆT BU·ªòC_** tu√¢n th·ªß 4-role development process
- **_B·∫ÆT BU·ªòC_** integrate v·ªõi template selection workflow

### K·∫øt H·ª£p v·ªõi File Protection Rules

- **_B·∫ÆT BU·ªòC_** backup files tr∆∞·ªõc khi modify
- **_B·∫ÆT BU·ªòC_** s·ª≠ d·ª•ng version control cho t·∫•t c·∫£ changes
- **_B·∫ÆT BU·ªòC_** document t·∫•t c·∫£ modifications

## Universal AI Behavior Rules

### Universal Analysis Phase Rules

1. **_B·∫ÆT BU·ªòC_** always start with comprehensive cross-platform codebase scan
2. **_B·∫ÆT BU·ªòC_** automatically identify project type v√† all technology stacks
3. **_B·∫ÆT BU·ªòC_** analyze platform-specific patterns v√† universal conventions
4. **_B·∫ÆT BU·ªòC_** assess technology-aware code quality v√† cross-platform technical debt
5. **_B·∫ÆT BU·ªòC_** document findings trong technology-structured format
6. **_B·∫ÆT BU·ªòC_** detect platform capabilities v√† limitations
7. **_B·∫ÆT BU·ªòC_** identify cross-platform compatibility opportunities

### Universal Planning Phase Rules

1. **_B·∫ÆT BU·ªòC_** base all plans on comprehensive multi-technology analysis
2. **_B·∫ÆT BU·ªòC_** consider platform-specific architecture v√† universal patterns
3. **_B·∫ÆT BU·ªòC_** provide technology-realistic timelines v√† platform effort estimates
4. **_B·∫ÆT BU·ªòC_** identify technology-specific v√† cross-platform risks
5. **_B·∫ÆT BU·ªòC_** create platform-actionable v√† technology-specific implementation steps
6. **_B·∫ÆT BU·ªòC_** plan for technology integration v√† compatibility
7. **_B·∫ÆT BU·ªòC_** consider platform resource requirements v√† constraints

### Universal Review Phase Rules

1. **_B·∫ÆT BU·ªòC_** validate technical feasibility cho t·∫•t c·∫£ target platforms
2. **_B·∫ÆT BU·ªòC_** ensure cross-platform compatibility v·ªõi existing codebase
3. **_B·∫ÆT BU·ªòC_** review platform-specific performance v√† universal scalability
4. **_B·∫ÆT BU·ªòC_** assess technology-specific security considerations
5. **_B·∫ÆT BU·ªòC_** optimize plan based on cross-platform review findings
6. **_B·∫ÆT BU·ªòC_** validate technology ecosystem integration
7. **_B·∫ÆT BU·ªòC_** ensure platform best practices compliance

### Universal Execution Phase Rules

1. **_B·∫ÆT BU·ªòC_** wait for explicit user approval cho t·∫•t c·∫£ platform targets
2. **_B·∫ÆT BU·ªòC_** follow technology-approved plan exactly
3. **_B·∫ÆT BU·ªòC_** provide platform-specific progress updates during implementation
4. **_B·∫ÆT BU·ªòC_** handle technology errors gracefully v·ªõi platform-appropriate fallbacks
5. **_B·∫ÆT BU·ªòC_** document all cross-platform changes v√† technology decisions
6. **_B·∫ÆT BU·ªòC_** maintain technology consistency across platforms
7. **_B·∫ÆT BU·ªòC_** ensure universal workflow integration

### Universal Development Request Handling

1. **_B·∫ÆT BU·ªòC_** immediately trigger B∆∞·ªõc 1 (Universal Project Detection & Analysis)
2. **_B·∫ÆT BU·ªòC_** kh√¥ng skip b·∫•t k·ª≥ technology detection step n√†o trong workflow
3. **_B·∫ÆT BU·ªòC_** t·∫°o t·∫•t c·∫£ required technology-aware documents theo universal templates
4. **_B·∫ÆT BU·ªòC_** provide comprehensive cross-platform analysis tr∆∞·ªõc khi planning
5. **_B·∫ÆT BU·ªòC_** wait for user confirmation cho t·∫•t c·∫£ platform targets tr∆∞·ªõc implementation
6. **_B·∫ÆT BU·ªòC_** adapt workflow behavior based on detected project type
7. **_B·∫ÆT BU·ªòC_** apply technology-specific best practices automatically

### Universal File Organization Rules

1. **_B·∫ÆT BU·ªòC_** t·∫°o th∆∞ m·ª•c `code_base/context/` cho cross-platform analysis documents
2. **_B·∫ÆT BU·ªòC_** t·∫°o th∆∞ m·ª•c `code_base/plan/` cho technology-aware planning documents
3. **_B·∫ÆT BU·ªòC_** use technology-consistent naming: `[DocumentType]_[FeatureName]_[Date].md`
4. **_B·∫ÆT BU·ªòC_** include platform-specific deep links ƒë·∫øn related files v√† documents
5. **_B·∫ÆT BU·ªòC_** maintain cross-platform cross-references gi·ªØa c√°c documents
6. **_B·∫ÆT BU·ªòC_** organize documents by technology when multiple platforms involved
7. **_B·∫ÆT BU·ªòC_** ensure universal accessibility across different technology stacks

### Universal Quality Assurance Rules

1. **_B·∫ÆT BU·ªòC_** validate t·∫•t c·∫£ technology analysis findings tr∆∞·ªõc khi planning
2. **_B·∫ÆT BU·ªòC_** ensure plans are platform-realistic v√† technology-achievable
3. **_B·∫ÆT BU·ªòC_** review cross-platform technical feasibility c·ªßa proposed solutions
4. **_B·∫ÆT BU·ªòC_** verify universal compatibility v·ªõi existing multi-technology codebase
5. **_B·∫ÆT BU·ªòC_** document technology assumptions v√† platform constraints clearly
6. **_B·∫ÆT BU·ªòC_** validate technology ecosystem integration possibilities
7. **_B·∫ÆT BU·ªòC_** ensure platform best practices compliance across all targets

### Universal Error Handling Rules

1. **_B·∫ÆT BU·ªòC_** gracefully handle missing platform files ho·∫∑c incomplete technology stacks
2. **_B·∫ÆT BU·ªòC_** provide clear technology-specific error messages v·ªõi platform solutions
3. **_B·∫ÆT BU·ªòC_** offer alternative cross-platform approaches khi primary technology fails
4. **_B·∫ÆT BU·ªòC_** maintain universal workflow continuity despite platform-specific errors
5. **_B·∫ÆT BU·ªòC_** document t·∫•t c·∫£ technology modifications v√† platform adaptations
6. **_B·∫ÆT BU·ªòC_** provide technology fallback options for unsupported platforms
7. **_B·∫ÆT BU·ªòC_** ensure graceful degradation across different technology capabilities

## Directory Structure Requirements

### code_base/context/

```
code_base/
‚îú‚îÄ‚îÄ context/
‚îÇ   ‚îú‚îÄ‚îÄ CodebaseAnalysis_[ProjectName]_[Date].md
‚îÇ   ‚îú‚îÄ‚îÄ deep-dive/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ core-module.md
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ api-layer.md
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ data-layer.md
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ui-layer.md
‚îÇ   ‚îú‚îÄ‚îÄ architecture/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ system-design.md
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ data-flow.md
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ component-interaction.md
‚îÇ   ‚îî‚îÄ‚îÄ technical-requirements.md
```

### code_base/plan/

```
code_base/
‚îú‚îÄ‚îÄ plan/
‚îÇ   ‚îú‚îÄ‚îÄ DevelopmentPlan_[FeatureName]_[Date].md
‚îÇ   ‚îú‚îÄ‚îÄ FinalPlan_[FeatureName]_[Date].md
‚îÇ   ‚îú‚îÄ‚îÄ options/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ incremental-plan.md
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ bigbang-plan.md
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ hybrid-plan.md
‚îÇ   ‚îú‚îÄ‚îÄ implementation/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ algorithms.md
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ database.md
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ api-spec.md
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ui-guidelines.md
‚îÇ   ‚îî‚îÄ‚îÄ considerations/
‚îÇ       ‚îú‚îÄ‚îÄ breaking-changes.md
‚îÇ       ‚îú‚îÄ‚îÄ performance.md
‚îÇ       ‚îî‚îÄ‚îÄ security.md
```

## Success Metrics

### Analysis Quality

- **_B·∫ÆT BU·ªòC_** 100% project structure coverage
- **_B·∫ÆT BU·ªòC_** All major components identified
- **_B·∫ÆT BU·ªòC_** Architecture pattern clearly documented
- **_B·∫ÆT BU·ªòC_** Dependencies mapped completely

### Planning Quality

- **_B·∫ÆT BU·ªòC_** All tasks have clear acceptance criteria
- **_B·∫ÆT BU·ªòC_** Timeline estimates are realistic
- **_B·∫ÆT BU·ªòC_** Risk mitigation strategies defined
- **_B·∫ÆT BU·ªòC_** Code references are accurate v√† clickable

### User Experience

- **_B·∫ÆT BU·ªòC_** Navigation is intuitive v√† helpful
- **_B·∫ÆT BU·ªòC_** Deep links work correctly
- **_B·∫ÆT BU·ªòC_** Options are clearly presented
- **_B·∫ÆT BU·ªòC_** Decision points are well-defined

## Error Handling

### Khi Kh√¥ng Th·ªÉ Ph√¢n T√≠ch Codebase

```
üö´ KH√îNG TH·ªÇ PH√ÇN T√çCH CODEBASE

‚ùå L√Ω do: [Specific reason]
‚ùå Affected files: [List of files]

üîÑ ƒê·ªÅ xu·∫•t:
1. [Suggestion 1]
2. [Suggestion 2]
3. [Fallback option]
```

### Khi Planning Kh√¥ng Kh·∫£ Thi

```
üö´ K·∫æ HO·∫†CH KH√îNG KH·∫¢ THI

‚ùå V·∫•n ƒë·ªÅ: [Specific issues]
‚ùå Conflicts: [Conflicts with existing code]

üîÑ Alternatives:
1. [Alternative 1] - [Pros/Cons]
2. [Alternative 2] - [Pros/Cons]
3. [Simplified approach] - [Pros/Cons]
```

## Maintenance v√† Updates

### Regular Updates

- **_B·∫ÆT BU·ªòC_** update analysis khi codebase thay ƒë·ªïi significantly
- **_B·∫ÆT BU·ªòC_** review plans khi requirements change
- **_B·∫ÆT BU·ªòC_** maintain accuracy c·ªßa deep links
- **_B·∫ÆT BU·ªòC_** update templates based on feedback

### Version Control

- **_B·∫ÆT BU·ªòC_** version t·∫•t c·∫£ analysis v√† planning documents
- **_B·∫ÆT BU·ªòC_** track changes v√† rationale
- **_B·∫ÆT BU·ªòC_** maintain history cho future reference
- **_B·∫ÆT BU·ªòC_** archive outdated plans properly
