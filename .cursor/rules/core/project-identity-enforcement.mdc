# Project Identity Enforcement Workflow

## Overview

Workflow n√†y ƒë·∫£m b·∫£o r·∫±ng AI assistant lu√¥n ki·ªÉm tra v√† tu√¢n th·ªß th√¥ng tin trong `.project-identity` tr∆∞·ªõc khi th·ª±c hi·ªán b·∫•t k·ª≥ nhi·ªám v·ª• n√†o.

## üî¥ MANDATORY RULES

### Pre-Task Identity Check

**B·∫ÆT BU·ªòC th·ª±c hi·ªán tr∆∞·ªõc m·ªçi nhi·ªám v·ª•:**

1. **Read .project-identity file**
2. **Analyze project context**
3. **Load appropriate workflow rules**
4. **Apply project-specific constraints**

### Identity Check Protocol

#### Step 1: File Validation
```
IF .project-identity exists:
  ‚Üí Proceed to Step 2
ELSE:
  ‚Üí Create .project-identity template
  ‚Üí Request user to fill required information
  ‚Üí STOP until completed
```

#### Step 2: Context Analysis
**Extract and understand:**
- `projectType`: Determines platform-specific rules
- `projectStage`: Defines current workflow phase
- `mainLanguages`: Programming languages in use
- `mainFrameworks`: Technology stack
- `keyFeatures`: Core functionality
- `projectLifecycle`: Current stage requirements

#### Step 3: Workflow Rules Loading
**Load rules in this order:**
1. `coreRules.always_applied` (mandatory for all tasks)
2. `platformSpecificRules` based on `projectType`
3. Stage-specific rules from `projectLifecycle`
4. Integration rules if features are enabled

#### Step 4: Enforcement Validation
**Check constraints:**
- Verify stage progression rules
- Validate new project detection triggers
- Ensure no stage skipping
- Apply workflow enforcement rules

## Workflow Rules Mapping

### By Project Type

**Android Projects:**
```
Required Rules:
- .cursor/rules/android-workflow.mdc
- .cursor/rules/android-code-deduplication.mdc
- .cursor/rules/tdd-mobile-workflow.mdc
- .cursor/rules/mobile-utility-workflow.mdc
```

**iOS Projects:**
```
Required Rules:
- .cursor/rules/ios-workflow.mdc
- .cursor/rules/tdd-mobile-workflow.mdc
- .cursor/rules/mobile-utility-workflow.mdc
```

**Web Projects:**
```
Required Rules:
- .cursor/rules/frontend-rules.mdc
- .cursor/rules/backend-rules-optimized.mdc
- .cursor/rules/api-integration-rules.mdc
```

**Flutter Projects:**
```
Required Rules:
- .cursor/rules/mobile-utility-workflow.mdc
- .cursor/rules/tdd-mobile-workflow.mdc
```

### By Project Stage

**Stage 1 - Brainstorm:**
```
Required Rules:
- .cursor/rules/brainstorm-workflow.mdc
- .cursor/rules/brainstorm-detailed-workflow.mdc
Blocking: Cannot proceed to development without brainstorm completion
```

**Stage 2 - Setup:**
```
Required Rules:
- .cursor/rules/project-creation-workflow.mdc
- .cursor/rules/planning-workflow.mdc
- .cursor/rules/tech-stack-selection.mdc
```

**Stage 3 - Development:**
```
Required Rules:
- Platform-specific development rules
- .cursor/rules/development-rules.mdc
- .cursor/rules/tdd-guidelines.mdc
```

## Context7 Integration (Enhanced)

### Memory Check Requirements
**Before starting any task:**
1. **B·∫ÆT BU·ªòC**: K√≠ch ho·∫°t Context7 Auto-Check Workflow
2. **B·∫ÆT BU·ªòC**: Search Context7 for project-related memories
3. **B·∫ÆT BU·ªòC**: Resolve library IDs cho c√°c tech stack components
4. **B·∫ÆT BU·ªòC**: Thu th·∫≠p documentation v√† best practices
5. **B·∫ÆT BU·ªòC**: Apply lessons learned from similar projects
6. **B·∫ÆT BU·ªòC**: Check for existing solutions or patterns
7. **B·∫ÆT BU·ªòC**: Validate architecture choices v·ªõi industry standards
8. **B·∫ÆT BU·ªòC**: Update memory with new insights
9. **M·ªöI**: Implement error handling cho Context7 failures
10. **M·ªöI**: Cache Context7 results ƒë·ªÉ improve performance

### Memory Categories to Check
- Project architecture decisions
- Technology stack experiences
- Common issues and solutions
- Best practices for project type
- Integration patterns
- Library compatibility matrices
- Performance optimization patterns

## Enforcement Actions

### Blocking Conditions
**STOP execution if:**
- `.project-identity` is missing or incomplete
- Project stage requirements not met
- Required workflow rules not loaded
- Stage progression rules violated

### Warning Conditions
**Warn user if:**
- Project type doesn't match detected technology
- Stage seems inconsistent with project state
- Missing recommended integrations
- Outdated project information

### Auto-Update Triggers
**Automatically update `.project-identity` when:**
- New technologies are detected
- Project stage naturally progresses
- New features are implemented
- Integration status changes

## Error Handling

### Missing .project-identity
```
Action: Create template file
Message: "üö´ Project identity file missing. Creating template..."
Next: Request user to complete required fields
```

### Incomplete Information
```
Action: Identify missing fields
Message: "‚ö†Ô∏è Project identity incomplete. Missing: [fields]"
Next: Request specific information
```

### Stage Violation
```
Action: Block execution
Message: "üö´ Cannot skip project stages. Current: [stage], Required: [required]"
Next: Guide user to complete current stage
```

## Integration Points

### With Other Workflows
- **Planning Workflow**: Validates stage progression
- **Development Rules**: Applies technology-specific constraints
- **Resource Management**: Allocates resources based on project needs

### With MCP Tools
- **Context7**: Memory and experience lookup
- **Memory Bank**: Project knowledge storage
- **Telegram Notifications**: Status updates if enabled

## Success Criteria

**Task can proceed when:**
- ‚úÖ `.project-identity` exists and is complete
- ‚úÖ All required workflow rules are loaded
- ‚úÖ Project context is understood
- ‚úÖ Stage requirements are validated
- ‚úÖ No blocking conditions exist

## Monitoring and Logging

### Log Events
- Identity check completion
- Workflow rules loaded
- Stage transitions
- Enforcement actions taken
- Auto-updates performed

### Metrics to Track
- Identity check compliance rate
- Stage progression accuracy
- Rule loading success rate
- User satisfaction with guidance

## Best Practices

### For AI Assistant
1. Always check identity before any substantial work
2. Provide clear guidance when blocking
3. Suggest next steps for resolution
4. Keep project information updated
5. Use appropriate workflow rules consistently

### For Users
1. Keep `.project-identity` updated
2. Follow stage progression naturally
3. Provide complete project information
4. Review and confirm auto-updates
5. Use project-appropriate workflows

## Troubleshooting

### Common Issues

**Issue**: AI not following project-specific rules
**Solution**: Verify `.project-identity` completeness and rule loading

**Issue**: Blocked from proceeding with task
**Solution**: Check stage requirements and complete prerequisites

**Issue**: Inconsistent behavior across sessions
**Solution**: Ensure `.project-identity` is committed to repository

**Issue**: Wrong workflow rules applied
**Solution**: Verify `projectType` and `projectStage` accuracy

---

**Workflow Version**: 1.0
**Last Updated**: 2024-12-19
**Compatibility**: All project types
**Dependencies**: .project-identity file, Context7 MCP