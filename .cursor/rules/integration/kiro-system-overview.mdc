---
description: Kiro System Overview - Tổng quan hệ thống Kiro Task System với Dynamic Workflow. Kích hoạt khi working với Kiro system understanding, task management overview, hoặc system architecture review.
alwaysApply: false
---

# Kiro System Overview - Tổng Quan Hệ Thống

## Mục Đích

Document này cung cấp tổng quan về toàn bộ hệ thống Kiro Task System, bao gồm quy trình chính và quy trình động (dynamic workflow).

## Kiến Trúc Hệ Thống

### Core Components

1. **Kiro Task Execution System** - Hệ thống thực thi task chính
2. **Kiro Dynamic Workflow** - Quy trình tự động tạo/cập nhật files khi thiếu
3. **Integration Layer** - Tích hợp với existing workflows
4. **Validation System** - Đảm bảo chất lượng và consistency

### File Structure

```
.kiro/
├── specs/
│   └── {project}/
│       ├── requirements.md    # Generated by dynamic workflow or Kiro tools
│       ├── design.md         # Generated by dynamic workflow or Kiro tools
│       └── tasks.md          # Primary task execution source
└── steering/
    └── kiro-spec-rules.md

.cursor/rules/
├── kiro-task-execution.mdc      # Main execution workflow
├── kiro-dynamic-workflow.mdc    # Dynamic workflow
├── base-rules.mdc              # Updated with Kiro integration
├── planning-workflow.mdc       # Updated for Kiro tasks
├── brainstorm-detailed-workflow.mdc  # Updated for Kiro tasks
├── development-rules.mdc       # Updated for Kiro tasks
├── auto-task-execution.mdc     # Updated for Kiro tasks
├── project-stage-manager.mdc   # Updated for Kiro tasks
└── project-creation-workflow.mdc # Updated for Kiro tasks
```

## Workflow Decision Tree

### Primary Flow (Kiro Tools Available)

```
1. User requests task execution
2. Check .kiro/specs/{project}/ directory
3. If all files exist (requirements.md, design.md, tasks.md):
   → Execute Kiro Task Execution Workflow
4. Parse tasks.md and execute according to priorities/dependencies
5. Update task status and continue execution
```

### Dynamic Flow (Missing Files)

```
1. User requests task execution
2. Check .kiro/specs/{project}/ directory
3. If missing any files (requirements.md, design.md, tasks.md):
   → Trigger Kiro Dynamic Workflow
4. Offer options:
   a. Use Kiro tools (recommended)
   b. Execute dynamic workflow: Brainstorm → Requirements → Design → Tasks
5. Generate missing files according to Kiro specifications
6. Validate generated files
7. Resume normal Kiro Task Execution
```

## Integration Points

### Updated Workflows

Tất cả các workflow sau đã được cập nhật để tích hợp với Kiro system:

1. **[Base Rules](base-rules.mdc)**

   - Thêm Kiro Task System Integration
   - Thêm Kiro Dynamic Workflow rules
   - Deprecated legacy task lists

2. **[Planning Workflow](planning-workflow.mdc)**

   - Output planning results vào `.kiro/specs/{project}/tasks.md`
   - Convert planning insights thành Kiro task format
   - Validate task dependencies và priorities

3. **[Brainstorm Detailed Workflow](brainstorm-detailed-workflow.mdc)**

   - Tạo Kiro tasks từ brainstorm insights
   - Link brainstorm results với task acceptance criteria
   - Validate project structure cho Kiro compatibility

4. **[Development Rules](development-rules.mdc)**

   - Thực hiện tasks theo Kiro specifications
   - Update task status trong `.kiro/specs/{project}/tasks.md`
   - Reference task IDs trong commit messages

5. **[Auto Task Execution](auto-task-execution.mdc)**

   - Require `.kiro/specs/{project}/tasks.md` existence
   - Execute tasks theo Kiro format và dependencies
   - Validate Kiro task format trước khi execution

6. **[Project Stage Manager](project-stage-manager.mdc)**

   - Setup Kiro task system trong Stage 2
   - Focus on Kiro task execution trong Stage 3
   - Track task status và dependencies

7. **[Project Creation Workflow](project-creation-workflow.mdc)**
   - Setup Kiro task system cho new projects
   - Generate initial Kiro tasks từ instruction
   - Create `.kiro/specs/{project}/` structure

## Dynamic Workflow Details

### Trigger Conditions

- Missing `.kiro/specs/{project}/requirements.md`
- Missing `.kiro/specs/{project}/design.md`
- Missing `.kiro/specs/{project}/tasks.md`
- Invalid file format trong existing files

### Execution Phases

1. **Phase 1: Brainstorm** - Foundation, Structure, Advanced insights
2. **Phase 2: Requirements** - Convert insights thành structured requirements
3. **Phase 3: Design** - Create system architecture và component design
4. **Phase 4: Tasks** - Generate executable tasks từ design specifications

### Quality Gates

- Requirements validation (SMART criteria)
- Design validation (architectural consistency)
- Task validation (Kiro format compliance)
- Integration testing (compatibility với Kiro execution)

## Benefits của Integrated System

### Automation

- Tự động phát hiện và thực thi Kiro tasks
- Tự động trigger dynamic workflow khi cần thiết
- Tự động validate file format và dependencies

### Standardization

- Consistent task format across all projects
- Standardized file structure và naming conventions
- Unified workflow cho task creation và execution

### Traceability

- Clear link từ brainstorm đến requirements đến design đến tasks
- Task ID references trong commit messages
- Audit trail cho all task modifications

### Quality Assurance

- Validation gates ở mỗi phase
- Acceptance criteria cho mỗi task
- Dependency management và conflict resolution

### Flexibility

- Support cho both Kiro tools và manual dynamic workflow
- Extensible architecture cho future enhancements
- Backward compatibility với existing projects

## Usage Guidelines

### For Developers

1. Always check `.kiro/specs/{project}/tasks.md` trước khi start work
2. Update task status khi bắt đầu và hoàn thành tasks
3. Reference task IDs trong commit messages
4. Validate acceptance criteria trước khi mark completed

### For Project Managers

1. Use Kiro tools để tạo requirements, design, và tasks
2. Monitor task progress through `.kiro/specs/{project}/tasks.md`
3. Use dynamic workflow khi Kiro tools không available
4. Ensure quality gates được passed ở mỗi phase

### For AI Assistants

1. Always prioritize Kiro task execution over manual task creation
2. Trigger dynamic workflow khi detect missing files
3. Validate generated content theo Kiro specifications
4. Maintain consistency across all integrated workflows

## Troubleshooting

### Common Issues

1. **Missing Kiro Files**

   - Solution: Trigger dynamic workflow hoặc use Kiro tools
   - Prevention: Setup proper project structure từ đầu

2. **Invalid Task Format**

   - Solution: Validate và reformat theo Kiro specifications
   - Prevention: Use templates và validation tools

3. **Dependency Conflicts**

   - Solution: Analyze dependency graph và resolve conflicts
   - Prevention: Careful planning và dependency management

4. **Dynamic Workflow Failures**
   - Solution: Manual intervention và file creation
   - Prevention: Ensure brainstorm completeness

### Recovery Procedures

1. Backup existing files trước khi modifications
2. Use version control để track changes
3. Maintain rollback procedures cho failed operations
4. Document lessons learned cho future improvements

## Future Roadmap

### Short Term

- Enhanced validation tools
- Better error messages và guidance
- Improved dynamic workflow automation
- Integration với more external tools

### Long Term

- AI-powered task estimation và prioritization
- Advanced dependency detection và resolution
- Real-time collaboration features
- Advanced analytics và reporting

## Conclusion

Hệ thống Kiro với Dynamic Workflow cung cấp một giải pháp comprehensive cho task management, đảm bảo rằng projects có thể proceed efficiently regardless của whether Kiro tools are available hay không. System này maintain high quality standards while providing flexibility và robustness cần thiết cho real-world development scenarios.

---

**Lưu ý**: Document này sẽ được cập nhật khi có changes trong Kiro system hoặc dynamic workflow. Always refer to individual workflow files cho detailed implementation instructions.
