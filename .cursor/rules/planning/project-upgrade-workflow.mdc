---
description: Project Upgrade Workflow - Quy trình để nâng cấp dự án hiện có theo cấu trúc 6 tài liệu. Kích hoạt khi working với project upgrades, legacy code migration, hoặc project structure improvements.
alwaysApply: false
---

## ⚠️ CẢNH BÁO NGHIÊM CẤM SKIP QUY TRÌNH ⚠️

- **_NGHIÊM CẤM_** bắt đầu code ngay khi nhận yêu cầu "Nâng cấp dự án về..."
- **_NGHIÊM CẤM_** bỏ qua việc rà soát dự án hiện tại trước khi đề xuất nâng cấp
- **_NGHIÊM CẤM_** giả định rằng yêu cầu nâng cấp ban đầu đã đủ chi tiết
- **_BẮT BUỘC_** trả lời: "Trước khi bắt đầu nâng cấp, tôi cần hiểu rõ hơn về dự án hiện tại và mục tiêu nâng cấp của bạn"
- **_BẮT BUỘC_** đánh giá cấu trúc và tính năng hiện có của dự án
- **_BẮT BUỘC_** tạo kế hoạch nâng cấp cụ thể và được người dùng xác nhận
- **_BẮT BUỘC_** backup dữ liệu và code trước khi thực hiện thay đổi
- **_BẮT BUỘC_** đánh giá rủi ro của việc nâng cấp đối với chức năng hiện có
- **_BẮT BUỘC_** có sự chấp thuận rõ ràng từ người dùng trước khi bắt đầu code

## Tổng Quan

Quy trình nâng cấp dự án áp dụng cấu trúc "6 Docs" cho dự án đã tồn tại, giúp cải thiện tài liệu và tối ưu cho AI làm việc với codebase.

## Các Bước Thực Hiện

### 1. Phân Tích Dự Án Hiện Tại

- Rà soát codebase và tài liệu hiện có
- Xác định các khoảng trống trong tài liệu
- Đánh giá chất lượng và đầy đủ của tài liệu hiện tại
- Liệt kê các tính năng và chức năng đã triển khai

### 2. Chọn Tính Cách AI

- Kiểm tra xem dự án đã có file `.project-personality` chưa
- Nếu chưa có, chọn ngẫu nhiên một tính cách từ danh sách trong project-personality-generator.mdc
- Tạo file `.project-personality` để lưu trữ thông tin tính cách
- Thông báo cho người dùng về tính cách được chọn
- Áp dụng tính cách này trong toàn bộ cuộc hội thoại liên quan đến dự án

### 3. Backup Tài Liệu Hiện Tại

- Tạo backup toàn bộ tài liệu vào thư mục `_backups`
- Giữ nguyên cấu trúc thư mục gốc
- Ghi log backup với thông tin ngày giờ và lý do
- Đảm bảo backup hoàn thành trước khi tiến hành thay đổi

### 4. Chuyển Đổi và Tích Hợp Tài Liệu

Tạo thư mục `docs/` với 6 tài liệu, sử dụng thông tin từ tài liệu hiện có:

```
docs/
├── 1-PRD.md               # Project Requirements Doc
├── 2-AppFlow.md           # App Flow Doc
├── 3-TechStack.md         # Tech Stack Doc
├── 4-FrontendGuidelines.md # Frontend Guidelines
├── 5-BackendStructure.md  # Backend Structure Doc
└── 6-ImplementationPlan.md # Implementation Plan
```

### 5. Xây Dựng App Flow

Trích xuất từ Diagram.md và các tài liệu liên quan:

- Liệt kê và mô tả từng trang trong ứng dụng
- Cách người dùng di chuyển giữa các trang
- Cập nhật theo trạng thái hiện tại của ứng dụng
- Xác định các luồng chưa được tài liệu hóa

### 6. Tài Liệu Hóa Tech Stack

Lấy thông tin từ package.json, Dockerfile, và codebase:

- Liệt kê tất cả packages & dependencies đang sử dụng
- Cung cấp links đến API docs
- Xác định các thư viện và công cụ đang dùng
- Mô tả environments hiện tại

### 7. Xây Dựng Frontend Guidelines

Trích xuất từ mã nguồn và các tài liệu UI:

- Fonts và typography đang sử dụng
- Bảng màu hiện tại
- Quy tắc spacing & layout
- Thư viện UI hoặc framework
- Bộ icon đang dùng
- Components và design patterns

### 8. Tài Liệu Hóa Backend Structure

Reverse engineer từ codebase và cơ sở dữ liệu:

- Schema cơ sở dữ liệu hiện tại
- Logic xác thực và phân quyền
- Quy tắc lưu trữ đang áp dụng
- API endpoints đã triển khai
- Các edge cases đã xử lý

### 9. Tạo Implementation Plan Mới

Lập kế hoạch chi tiết cho các tính năng mới hoặc cải tiến:

- Liệt kê các bước cụ thể để triển khai thay đổi
- Xác định tác động đến hệ thống hiện tại
- Đảm bảo tương thích ngược
- Ước tính thời gian cho mỗi thay đổi

### 10. Triển Khai Nâng Cấp

- Tuân theo Implementation Plan
- Cập nhật tài liệu song song với code
- Ghi lại các quyết định thiết kế mới trong Decisions.md
- Cập nhật Changelog.md với các thay đổi

## Lưu Ý Quan Trọng

- **_BẮT BUỘC_** duy trì tính nhất quán với codebase hiện tại
- **_BẮT BUỘC_** bảo tồn kiến trúc và design patterns hiện có
- **_BẮT BUỘC_** đảm bảo tương thích ngược
- **_BẮT BUỘC_** test kỹ lưỡng các thay đổi
- **_KHUYẾN NGHỊ_** cập nhật tất cả 6 tài liệu song song

## Quản Lý Quá Trình Chuyển Đổi

- Áp dụng việc chuyển đổi tài liệu theo từng giai đoạn
- Ưu tiên PRD, Tech Stack và Implementation Plan trước
- Hoàn thiện các tài liệu còn lại khi có thêm thông tin
- Duy trì cả tài liệu cũ và mới trong giai đoạn chuyển tiếp

## Tiêu Chí Đánh Giá

Sau khi hoàn thành chuyển đổi, hãy kiểm tra:

- ✅ 6 tài liệu phản ánh chính xác trạng thái hiện tại của dự án
- ✅ Không có mất mát thông tin từ tài liệu cũ
- ✅ Tài liệu mới cung cấp cái nhìn rõ ràng hơn về dự án
- ✅ Implementation Plan phù hợp với hướng phát triển tiếp theo

## Mẫu Tài Liệu Tham Khảo

Xem chi tiết tại: [docs/templates/](mdc:docs/templates)

## Quy Tắc Cơ Bản

- **_BẮT BUỘC_** rà soát kỹ dự án hiện tại trước khi đề xuất nâng cấp
- **_BẮT BUỘC_** tạo kế hoạch nâng cấp chi tiết trong file Upgrade_Plan.md
- **_BẮT BUỘC_** yêu cầu người dùng review và phê duyệt kế hoạch nâng cấp trước khi thực hiện
- **_BẮT BUỘC_** backup tất cả file liên quan trước khi tiến hành thay đổi
- **_BẮT BUỘC_** kiểm tra file db-schema.sql trước khi tạo hoặc sửa đổi database
- **_KHUYẾN NGHỊ_** ưu tiên tính tương thích ngược khi thiết kế nâng cấp
- **_TRÁNH_** thực hiện nghiên cứu đối thủ cạnh tranh trong giai đoạn nâng cấp
- **_TRÁNH_** thay đổi cấu trúc cơ bản của dự án trừ khi thực sự cần thiết

## Thiết Lập Tính Cách AI

- **_BẮT BUỘC_** kiểm tra xem dự án đã có file `.project-personality` chưa
- **_BẮT BUỘC_** nếu chưa có, khởi tạo tính cách ngẫu nhiên từ danh sách trong project-personality-generator.mdc
- **_BẮT BUỘC_** tạo file `.project-personality` để lưu trữ thông tin tính cách nếu chưa có
- **_BẮT BUỘC_** thông báo cho người dùng về tính cách được chọn
- **_BẮT BUỘC_** áp dụng tính cách này trong toàn bộ cuộc hội thoại liên quan đến dự án
- **_BẮT BUỘC_** duy trì nhất quán trong việc thể hiện tính cách
- **_KHUYẾN NGHỊ_** hỏi người dùng nếu họ muốn đổi tính cách
- **_KHUYẾN NGHỊ_** điều chỉnh mức độ thể hiện tính cách dựa trên phản hồi của người dùng
- Tham khảo thêm tại file `.cursor/rules/project-personality-generator.mdc` cho hướng dẫn chi tiết
- Mẫu thông báo khi khởi tạo tính cách mới:
  ```
  🎭 Dự án này chưa có tính cách AI! Tính cách đã được chọn: [Tên Tính Cách]!
  [Một câu giới thiệu phù hợp với tính cách được chọn]
  Nếu bạn không thích, cứ báo tôi đổi tính cách khác nhé!
  ```

## Rà Soát Dự Án Hiện Tại

- Tìm hiểu cấu trúc dự án và các module chính
- Xác định kiến trúc hiện tại, tech stack và các pattern đang áp dụng
- Phân tích các dependencies nội bộ và bên ngoài
- **_BẮT BUỘC_** xem xét file db-schema.sql để hiểu cấu trúc database hiện tại
- Xác định các module có liên quan đến tính năng mới
- Kiểm tra code conventions và style guide đang được áp dụng
- Tìm hiểu flow hiện tại của tính năng liên quan
- Tổng hợp và ghi chú các điểm yếu/hạn chế của dự án hiện tại
- Kiểm tra các vấn đề tồn đọng và technical debt hiện có
- Xác định các phần code có thể tái sử dụng cho tính năng mới
- Đánh giá độ ổn định của hệ thống hiện tại

## Quản Lý Database Trong Quá Trình Nâng Cấp

- **_BẮT BUỘC_** kiểm tra file db-schema.sql trước khi thực hiện bất kỳ thay đổi nào liên quan đến database
- **_BẮT BUỘC_** cập nhật file db-schema.sql ngay sau khi thực hiện thay đổi cấu trúc database
- **_BẮT BUỘC_** tạo các script migration khi thay đổi cấu trúc database đã tồn tại
- **_BẮT BUỘC_** backup dữ liệu trước khi thực hiện thay đổi cấu trúc database
- **_BẮT BUỘC_** kiểm tra các database hiện có trước khi tạo mới để tránh trùng lặp
- **_KHUYẾN NGHỊ_** tận dụng lại cấu trúc database hiện có thay vì tạo mới
- Cập nhật lịch sử thay đổi trong file db-schema.sql theo cú pháp:
  ```sql
  -- <ngày> - <người thực hiện> - <mô tả thay đổi>
  ```
- Thêm các comment mô tả chi tiết cho từng thay đổi cấu trúc
- Xác định và ghi rõ tác động của thay đổi database đến chức năng hiện có
- Kiểm thử kỹ lưỡng sau khi thực hiện thay đổi database
- Tham khảo thêm tại file `.cursor/rules/database-management.mdc` cho hướng dẫn chi tiết

## Supabase MCP Trong Quá Trình Nâng Cấp

- **_BẮT BUỘC_** kiểm tra cài đặt Supabase MCP nếu dự án sử dụng Supabase

  ```bash
  # Kiểm tra xem đã cài đặt chưa
  which mcp-server-postgrest

  # Nếu chưa, cài đặt
  npm install -g @supabase/mcp-server-postgrest
  ```

- **_BẮT BUỘC_** kiểm tra file `.env` chứa đầy đủ cấu hình Supabase:
  ```
  SUPABASE_URL=https://your-project-url.supabase.co
  SUPABASE_ANON_KEY=your-anon-key
  SUPABASE_SERVICE_ROLE_KEY=your-service-role-key
  ```
- **_BẮT BUỘC_** yêu cầu người dùng cấu hình các biến thiếu trước khi tiếp tục
- **_BẮT BUỘC_** sử dụng MCP để kiểm tra tất cả thay đổi liên quan đến database:
  - Thay đổi cấu trúc bảng
  - Thay đổi RLS policies
  - Thay đổi functions
  - Thay đổi triggers
  - Tạo mới hoặc thay đổi views
- **_BẮT BUỘC_** kiểm tra tác động của thay đổi đến hiệu năng thông qua MCP
- **_BẮT BUỘC_** chạy MCP song song trong suốt quá trình nâng cấp:
  ```bash
  mcp-server-postgrest --apiUrl=$SUPABASE_URL/rest/v1 --apiKey=$SUPABASE_ANON_KEY --schema=public
  # Hoặc nếu script đã được cấu hình trong package.json
  npm run mcp
  ```
- **_KHUYẾN NGHỊ_** sử dụng MCP để xác thực tất cả queries trước khi triển khai
- **_KHUYẾN NGHỊ_** cập nhật types từ schema database khi có thay đổi
- **_KHUYẾN NGHỊ_** giữ số lượng database ít nhất có thể, tránh tạo quá nhiều database thử nghiệm
- Tham khảo thêm tại file `.cursor/rules/supabase-mcp-workflow.mdc` cho hướng dẫn chi tiết

## Phân Tích Tác Động

- Xác định các file/component sẽ bị ảnh hưởng bởi nâng cấp
- Đánh giá tác động đến:
  - Performance và hiệu suất hệ thống
  - Bảo mật và xử lý dữ liệu
  - Trải nghiệm người dùng (UX)
  - Khả năng mở rộng trong tương lai
  - Cấu trúc và hiệu suất database
- Ước tính mức độ thay đổi cần thiết (minimal, moderate, extensive)
- Xác định các rủi ro tiềm ẩn khi thực hiện nâng cấp
- Dự đoán các vấn đề có thể phát sinh trong quá trình nâng cấp
- Phân tích dependency chain để tránh breaking changes
- Đánh giá tác động của thay đổi đến các module khác
- Tìm hiểu các kịch bản sử dụng để đảm bảo không gây ra regression
- Đánh giá tác động đến performance với các thay đổi dự kiến

## Tạo Kế Hoạch Nâng Cấp

- Tạo file `Upgrade_[TenTinhNang].md` trong thư mục documentation/upgrades/
- File kế hoạch nâng cấp phải bao gồm:
  - Mục tiêu và scope của nâng cấp
  - Tóm tắt phân tích tác động
  - Danh sách cụ thể các file cần thay đổi
  - Chi tiết thay đổi cho từng file
  - Thứ tự thực hiện các thay đổi
  - Chiến lược kiểm thử
  - Ước tính thời gian thực hiện
  - Kế hoạch rollback nếu nâng cấp thất bại
- Phân chia kế hoạch thành các giai đoạn (phases) với milestone rõ ràng
- Đánh dấu các task theo mức độ ưu tiên (P0, P1, P2)
- Nhóm các task theo module hoặc chức năng
- Chỉ rõ dependencies giữa các task
- Liệt kê các task cụ thể với checklist
- Ước tính thời gian và độ phức tạp cho từng task
- Xác định các thành phần cần tạo mới hoàn toàn
- Xác định các thành phần cần sửa đổi
- Mô tả kế hoạch kiểm thử cho từng thay đổi

## Review Kế Hoạch

- Trình bày kế hoạch nâng cấp cho người dùng xem xét
- Giải thích rõ lý do cho từng thay đổi đề xuất
- Trình bày các lựa chọn kỹ thuật và lý do lựa chọn
- Đề xuất timeline thực hiện
- Thu thập feedback và điều chỉnh kế hoạch
- Lặp lại quy trình review cho đến khi kế hoạch được chấp thuận
- Lưu trữ kế hoạch cuối cùng đã được phê duyệt
- Xác định các rủi ro tiềm ẩn và biện pháp giảm thiểu
- Trình bày kế hoạch kiểm thử và validation
- Thống nhất về tiêu chí hoàn thành
- Đảm bảo người dùng hiểu rõ về tác động và thay đổi dự kiến

## Thực Hiện Nâng Cấp

- Tạo backup cho tất cả file sẽ bị ảnh hưởng (xem Quy Tắc Bảo Vệ File)
- Triển khai các thay đổi theo đúng kế hoạch đã được phê duyệt
- Tuân thủ nghiêm ngặt code conventions hiện có
- Cập nhật trạng thái các task trong kế hoạch
- Kiểm thử liên tục trong quá trình thực hiện
- Cập nhật documentation song song với việc thay đổi code
- Không mở rộng scope ngoài kế hoạch đã được phê duyệt
- Báo cáo bất kỳ vấn đề phát sinh nào cho người dùng
- Triển khai theo từng phase đã phân chia
- Kiểm thử mỗi thay đổi trước khi tiếp tục
- Đảm bảo các unit test đang pass sau mỗi thay đổi
- Theo dõi performance để đảm bảo không giảm sút
- Commit code thường xuyên với thông điệp rõ ràng

## Kiểm Thử Và Tổng Kết

- Thực hiện kiểm thử toàn diện sau khi hoàn thành nâng cấp
- Đảm bảo tất cả tính năng mới hoạt động như mong đợi
- Kiểm tra không có regression đối với tính năng hiện có
- Cập nhật tất cả documentation liên quan
- Tạo tài liệu hướng dẫn nếu tính năng mới cần hướng dẫn sử dụng
- Tổng kết công việc đã thực hiện so với kế hoạch ban đầu
- Ghi lại các bài học kinh nghiệm trong quá trình nâng cấp
- Đánh dấu hoàn thành trong master tracking document
- Thực hiện kiểm thử regression toàn diện
- So sánh performance trước và sau khi nâng cấp
- Đánh giá UX của tính năng mới
- Lập danh sách các vấn đề cần theo dõi sau khi triển khai
- Cập nhật documentation và changelog

## Chiến Lược Nâng Cấp An Toàn

- Áp dụng nguyên tắc "thay đổi nhỏ, deployment thường xuyên"
- Sử dụng feature flags để kiểm soát việc triển khai tính năng mới
- Thực hiện A/B testing khi có thể
- Chuẩn bị kế hoạch rollback cho mỗi thay đổi
- Thường xuyên merge code từ nhánh chính vào nhánh feature
- Sử dụng các kỹ thuật như Blue-Green Deployment khi cần
- Theo dõi metrics sau mỗi thay đổi
- Chuẩn bị phương án xử lý các vấn đề phát sinh
- Đảm bảo tính tương thích ngược khi có thể
- Phân loại thay đổi theo mức độ rủi ro

## Phân Biệt Với Quy Trình Dự Án Mới

| Quy Trình Dự Án Mới                           | Quy Trình Nâng Cấp Dự Án                       |
| --------------------------------------------- | ---------------------------------------------- |
| Brainstorming nhiều vòng với người dùng       | Rà soát dự án hiện tại                         |
| Nghiên cứu đối thủ cạnh tranh                 | Phân tích tác động của thay đổi                |
| Tạo instruction từ đầu                        | Tạo kế hoạch nâng cấp dựa trên dự án hiện có   |
| Xây dựng từ zero                              | Thay đổi dựa trên code đã tồn tại              |
| Tự do trong việc chọn cấu trúc và pattern     | Tuân thủ cấu trúc và pattern hiện có           |
| Focus vào việc xây dựng đúng đắn từ đầu       | Focus vào việc giữ tính tương thích và ổn định |
| Cập nhật .code-workspace và tạo workspace mới | Sử dụng workspace hiện có                      |

## Dấu Hiệu Nhận Biết Dự Án Cần Nâng Cấp

- Nhiều bug reports liên quan đến một module cụ thể
- Performance giảm dần theo thời gian
- Khó khăn khi thêm tính năng mới
- Phản hồi tiêu cực từ người dùng về UI/UX
- Codebase khó bảo trì và mở rộng
- Công nghệ và thư viện lỗi thời
- Tỷ lệ technical debt cao
- Thiếu tính năng cạnh tranh so với các sản phẩm tương tự
- Không đáp ứng được yêu cầu kinh doanh mới
- Chi phí bảo trì cao

@file ../\_backups/backup_log.md

## Quản Lý Resource Trong Quá Trình Nâng Cấp

- **_BẮT BUỘC_** kiểm tra và cập nhật các Cursor Rules trước khi bắt đầu nâng cấp dự án
- **_BẮT BUỘC_** rà soát các icon hiện có và xác định nhu cầu bổ sung icon mới
- **_BẮT BUỘC_** sử dụng Icon Library API để tìm kiếm và tải về các icon mới cần thiết
- **_BẮT BUỘC_** backup thư mục assets/icons trước khi thực hiện thay đổi lớn
- **_KHUYẾN NGHỊ_** duy trì tính nhất quán giữa các icon mới và cũ
- Quy trình quản lý icon trong nâng cấp dự án:
  1. Kiểm tra danh sách icon hiện có và style guide
  2. Xác định nhu cầu icon mới từ kế hoạch nâng cấp
  3. Tìm kiếm icon phù hợp qua Icon Library API:
     - Sử dụng `/search` endpoint với từ khóa cụ thể
     - Sử dụng `/suggest` endpoint với mô tả ngữ cảnh
  4. Tải icon mới về và đặt trong cấu trúc thư mục phù hợp
  5. Cập nhật README.md trong thư mục assets/icons với thông tin mới
  6. Tham chiếu icon mới trong code với đường dẫn tương đối
- Các trường hợp đặc biệt:
  - Thay thế icon cũ: Lưu bản sao vào thư mục backup trước khi thay thế
  - Thay đổi style icon: Thay thế đồng bộ tất cả icon liên quan
  - Thêm mới bộ icon: Tạo thư mục con phù hợp trong assets/icons

## Cập Nhật Cursor Rules

- **_BẮT BUỘC_** kiểm tra phiên bản mới nhất của các rules thông qua API endpoint `/rules`
- **_BẮT BUỘC_** cập nhật các rules hiện có với phiên bản mới nhất
- **_BẮT BUỘC_** xem xét bổ sung rules mới phù hợp với tính năng nâng cấp
- **_KHUYẾN NGHỊ_** thực hiện đồng bộ rules trước khi bắt đầu nâng cấp
- Quy trình cập nhật rules:
  1. Kiểm tra phiên bản hiện tại của rules trong `.cursor/rules`
  2. So sánh với phiên bản mới nhất từ API
  3. Tải về các rules cần cập nhật:
     ```bash
     # Tải rules từ server về local
     npm run rules:download
     ```
  4. Cập nhật file `.cursorrc` nếu cần kích hoạt rules mới
  5. Ghi lại thay đổi trong Changelog.md
- Khi thêm mới rule cho dự án:
  1. Tạo file rule mới trong `.cursor/rules` với định dạng .mdc
  2. Cấu trúc file với metadata và nội dung phù hợp
  3. Đồng bộ lên server:
     ```bash
     # Tải rule mới lên server
     npm run rules:upload
     ```
  4. Cập nhật Changelog.md với thông tin về rule mới
