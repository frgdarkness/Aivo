---
description: Planning Enforcement - Enhanced planning file enforcement v·ªõi user intent analysis v√† logic reasoning. K√≠ch ho·∫°t khi working v·ªõi feature additions, upgrades, ho·∫∑c major refactoring tasks.
alwaysApply: false
---

rule: "Enhanced Planning File Enforcement with User Intent Analysis & Logic Reasoning"

when:

- user_request.type in ["feature_add", "feature_upgrade", "new_module", "major_refactor", "database_changes", "security_features"]
- not file*exists("Planning*[TenDuAn].md")

then:

- trigger_user_intent_analysis
- analyze_real_user_intent
- identify_underlying_goals
- generate_solution_alternatives
- present_intent_analysis_to_user
- get_user_confirmation_on_approach
- analyze_request_complexity
- if complexity.level >= "medium":
  - trigger_logic_reasoning
  - extract_feature_requirements
  - identify_related_features
  - estimate_project_impact
  - generate_plan_draft_with_suggestions
  - present_interactive_interface
  - capture_user_decisions
  - finalize_approved_plan
- else:

  - block_action
  - show_message: |
    üö´ KH√îNG TH·ªÇ TH·ª∞C HI·ªÜN NHI·ªÜM V·ª§

    ‚ùå Ch∆∞a c√≥ file plan cho nhi·ªám v·ª• n√†y (Planning\_[TenDuAn].md)
    ‚ùå C·∫ßn t·∫°o v√† x√°c nh·∫≠n plan tr∆∞·ªõc khi th·ª±c hi·ªán

    üîÑ H√£y b·∫Øt ƒë·∫ßu v·ªõi: "T√¥i mu·ªën t·∫°o plan cho [m√¥ t·∫£ nhi·ªám v·ª•]"
    ü§ñ Ho·∫∑c: "T·∫°o auto-plan v·ªõi logic reasoning cho [m√¥ t·∫£ nhi·ªám v·ª•]"

  - suggest_action: "T·∫°o plan t·ª± ƒë·ªông v·ªõi AI reasoning"

unless:

- user_request.type in ["minor_fix", "typo", "small_refactor"]
- user_explicitly_skips_analysis: true

## Enhanced Planning Enforcement Rules

### Required Planning Files

C√°c nhi·ªám v·ª• sau PH·∫¢I c√≥ file k·∫ø ho·∫°ch tr∆∞·ªõc khi th·ª±c hi·ªán:

- Th√™m t√≠nh nƒÉng m·ªõi (feature addition)
- N√¢ng c·∫•p h·ªá th·ªëng (system upgrade)
- Refactoring l·ªõn (major refactoring)
- Thay ƒë·ªïi ki·∫øn tr√∫c (architecture changes)
- T√≠ch h·ª£p API m·ªõi (new API integration)
- Thay ƒë·ªïi database schema (database changes)
- Security implementations (security features)

### File Naming Convention

- Format: `Planning_[TenDuAn].md`
- Location: Project root directory
- Example: `Planning_UserAuthentication.md`
- Auto-generated: `Planning_[FeatureName]_AutoGenerated.md`

### Enhanced Enforcement Actions

Khi kh√¥ng c√≥ file planning:

#### 1. Intelligent Analysis

```yaml
steps:
  - analyze_request_complexity: "Assess if planning is truly needed"
  - extract_feature_requirements: "Parse user request for main features"
  - identify_related_features: "Use logic reasoning to find related features"
  - estimate_project_impact: "Calculate scope v√† complexity"
```

#### 2. Auto-Plan Generation

```yaml
if_planning_required:
  - trigger_logic_reasoning: "Activate feature suggestion engine"
  - generate_plan_draft: "Create comprehensive plan v·ªõi suggestions"
  - present_interactive_interface: "Show suggestions v·ªõi reasoning"
  - capture_user_decisions: "Collect user feedback on suggestions"
  - finalize_approved_plan: "Create final plan v·ªõi approved features"
```

#### 3. Fallback Actions

```yaml
if_auto_generation_fails:
  - block_action: "Prevent execution without plan"
  - provide_template: "Offer manual planning template"
  - guide_planning_process: "Step-by-step planning guidance"
  - suggest_brainstorm: "Recommend brainstorm session first"
```
