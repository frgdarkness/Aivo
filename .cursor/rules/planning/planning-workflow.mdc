---
description: Planning Workflow - Quy trình brainstorm và lên kế hoạch dự án có cấu trúc. Kích hoạt khi working với project planning, requirements analysis, hoặc structured project development.
alwaysApply: false
---

## Nguyên Tắc Cơ Bản

- **_BẮT BUỘC_** kiểm tra file Brainstorm\_[TenDuAn].md hoàn chỉnh trước khi lên kế hoạch
- **_BẮT BUỘC_** chỉ được planning khi brainstorm đã hoàn thành tất cả 3 phases
- **_BẮT BUỘC_** dựa trên kết quả brainstorm để tạo planning chi tiết
- **_BẮT BUỘC_** rà soát codebase hiện tại trước khi lên kế hoạch cho tính năng mới
- **_BẮT BUỘC_** tạo tài liệu kế hoạch chi tiết trước khi bắt đầu code
- **_BẮT BUỘC_** tạo tasks trong `.kiro/specs/{project}/tasks.md` theo Kiro specification
- **_BẮT BUỘC_** validate project structure và tạo `.kiro/specs/{project}/` nếu chưa tồn tại
- **_BẮT BUỘC_** thực hiện template selection ngay sau khi hoàn thành planning
- **_BẮT BUỘC_** tạo file Template_Selection.md với templates được chọn và loại bỏ
- **_BẮT BUỘC_** lên kế hoạch thời gian và đánh giá độ phức tạp cho từng task
- **_BắT BUỘC_** format tasks theo Kiro task structure với dependencies và acceptance criteria
- **_BẮT BUỘC_** xác định rõ đầu ra mong muốn và tiêu chí thành công
- **_BẮT BUỘC_** tuân thủ quy trình 4 vai trò: Planner > Architect > Builder > Tester
- **_BẮT BUỘC_** không bỏ qua bước Architect để "code cho nhanh"
- **_KHUYẾN NGHỊ_** chia nhỏ các task phức tạp thành nhiều task nhỏ hơn
- **_KHUYẾN NGHỊ_** tìm hiểu các giải pháp tương tự để có cái nhìn tổng quan
- **_KHUYẾN NGHỊ_** bắt đầu với template tối giản và thêm dần khi cần thiết
- **_NGHIÊM CẤM_** bắt đầu planning khi chưa có file brainstorm hoàn chỉnh
- **_NGHIÊM CẤM_** bắt đầu code khi chưa có kế hoạch rõ ràng
- **_NGHIÊM CẤM_** tạo tasks ở nơi khác ngoài `.kiro/specs/{project}/tasks.md`
- **_NGHIÊM CẤM_** sử dụng quá nhiều template gây phức tạp không cần thiết

## Quy Trình Brainstorm

1. **Hiểu Bối Cảnh**

   - Đặt ít nhất 3 câu hỏi để hiểu rõ bối cảnh và nhu cầu
   - Tìm hiểu động lực và mục tiêu đằng sau yêu cầu
   - Xác định vấn đề cốt lõi cần giải quyết

2. **Mở Rộng Tư Duy**

   - Đề xuất ít nhất 2-3 hướng tiếp cận khác nhau
   - Brainstorm không giới hạn các ý tưởng và giải pháp
   - Khám phá các giải pháp sáng tạo và không quy ước

3. **Thu Hẹp & Tập Trung**
   - Phân tích ưu nhược điểm của từng phương án
   - Chọn giải pháp phù hợp nhất dựa trên tiêu chí đã xác định
   - Xác định phạm vi và giới hạn của kế hoạch

## Định dạng EARS cho Requirements

### EARS (Easy Approach to Requirements Syntax)

Sử dụng định dạng EARS để viết requirements rõ ràng và không mơ hồ:

#### 1. Ubiquitous Requirements (Yêu cầu phổ quát)

```
THE SYSTEM SHALL [always do something]
Ví dụ: THE SYSTEM SHALL log all user authentication attempts
```

#### 2. Event-Driven Requirements (Yêu cầu theo sự kiện)

```
WHEN [trigger] THE SYSTEM SHALL [response]
Ví dụ: WHEN user clicks login button THE SYSTEM SHALL validate credentials

WHILE [state] THE SYSTEM SHALL [behavior]
Ví dụ: WHILE user session is active THE SYSTEM SHALL maintain authentication state
```

#### 3. State-Driven Requirements (Yêu cầu theo trạng thái)

```
WHILE [in state] THE SYSTEM SHALL [behavior]
Ví dụ: WHILE system is in maintenance mode THE SYSTEM SHALL display maintenance message
```

#### 4. Conditional Requirements (Yêu cầu có điều kiện)

```
IF [condition] THEN THE SYSTEM SHALL [action]
Ví dụ: IF password is incorrect 3 times THEN THE SYSTEM SHALL lock the account

WHERE [feature applies] THE SYSTEM SHALL [behavior]
Ví dụ: WHERE user has admin role THE SYSTEM SHALL show admin dashboard
```

#### 5. Optional Requirements (Yêu cầu tùy chọn)

```
WHERE [feature is optional] THE SYSTEM SHALL [behavior]
Ví dụ: WHERE dark mode is enabled THE SYSTEM SHALL use dark color scheme
```

## Câu Hỏi Brainstorm Theo Loại Dự Án

### Câu Hỏi Chung

- "Đâu là mục tiêu chính bạn muốn đạt được?"
- "Ai là người dùng chính và họ cần giải quyết vấn đề gì?"
- "Có giới hạn thời gian hoặc tài nguyên nào không?"
- "Bạn có thể chia sẻ ví dụ về các giải pháp tương tự bạn thích không?"
- "Có yêu cầu đặc biệt về hiệu suất, bảo mật, hoặc khả năng mở rộng không?"

### Dự Án Frontend

- "Bạn có wireframe hoặc thiết kế UI cụ thể nào không?"
- "Ứng dụng cần hỗ trợ những thiết bị và trình duyệt nào?"
- "Có yêu cầu cụ thể về accessibility không?"
- "Bạn thích phong cách thiết kế nào? (Material, Fluent, Minimal...)"
- "Có yêu cầu về thời gian tải trang hoặc kích thước bundle không?"

### Dự Án Backend

- "Lượng traffic dự kiến là bao nhiêu?"
- "Có yêu cầu về real-time không?"
- "Cần những loại API và endpoints nào?"
- "Cấu trúc database hiện tại như thế nào?"
- "Có yêu cầu về xác thực và phân quyền không?"

### Dự Án Fullstack

- "Bạn muốn phân chia trách nhiệm giữa frontend và backend như thế nào?"
- "Cần lưu trữ và đồng bộ hóa những loại dữ liệu nào?"
- "Có tính năng nào cần xử lý offline không?"
- "Cơ chế authentication và authorization dự kiến là gì?"
- "Có yêu cầu về SEO không?"

## Mẫu Tài Liệu Kế Hoạch

```markdown
# Kế Hoạch: [Tên Tính Năng/Dự Án]

## 1. Tổng Quan

- **Mục Tiêu**: [Mô tả ngắn gọn mục tiêu chính]
- **Phạm Vi**: [Xác định rõ những gì thuộc và không thuộc phạm vi]
- **Đầu Ra Mong Muốn**: [Liệt kê các kết quả cụ thể cần đạt được]

## 2. Requirements (EARS Format)

### Functional Requirements

- THE SYSTEM SHALL [requirement 1]
- WHEN [event] THE SYSTEM SHALL [requirement 2]
- IF [condition] THEN THE SYSTEM SHALL [requirement 3]

### Non-Functional Requirements

- THE SYSTEM SHALL [performance requirement]
- THE SYSTEM SHALL [security requirement]
- THE SYSTEM SHALL [usability requirement]

## 3. Phân Tích Hiện Trạng

- **Cấu Trúc Hiện Tại**: [Mô tả cấu trúc code/dự án hiện tại]
- **Các Thành Phần Liên Quan**: [Liệt kê các module/thành phần liên quan]
- **Giới Hạn & Ràng Buộc**: [Xác định các giới hạn kỹ thuật hoặc nghiệp vụ]

## 4. Giải Pháp Đề Xuất

- **Tổng Quan Giải Pháp**: [Mô tả high-level về giải pháp]
- **Thiết Kế & Kiến Trúc**: [Mô tả cấu trúc và các thành phần chính]
- **Công Nghệ & Thư Viện**: [Liệt kê công nghệ và thư viện sẽ sử dụng]

## 5. Template Selection & Configuration

- **Platform Analysis**: [Xác định platform chính và tech stack]
- **Template Requirements**: [Liệt kê templates cần thiết dựa trên features]
- **Selected Templates**:
  - Core Templates: [Danh sách core templates bắt buộc]
  - Platform Templates: [Templates specific cho platform]
  - Feature Templates: [Templates cho tính năng cụ thể]
- **Excluded Templates**: [Templates bị loại bỏ và lý do]
- **Integration Plan**: [Kế hoạch tích hợp templates vào workspace]

## 6. Kế Hoạch Triển Khai

- **Kiro Task Integration**:

  - Tạo `.kiro/specs/{project}/tasks.md` với format chuẩn Kiro
  - Mỗi task phải có ID duy nhất, status, priority, dependencies
  - Định nghĩa acceptance criteria rõ ràng cho từng task
  - Link tasks với requirements và design specifications

- **Các Bước Thực Hiện**:

  1. [Bước 1] - [Mô tả] - [Ước tính thời gian] - [Task ID: TASK-001]
     - **EARS Requirement**: WHEN [trigger] THE SYSTEM SHALL [action]
     - **Dependencies**: [List any dependencies]
     - **Acceptance Criteria**: [Define success criteria]
  2. [Bước 2] - [Mô tả] - [Ước tính thời gian] - [Task ID: TASK-002]
     - **EARS Requirement**: THE SYSTEM SHALL [action]
     - **Dependencies**: TASK-001
     - **Acceptance Criteria**: [Define success criteria]
       ...

- **Ưu Tiên & Phụ Thuộc**:
  - P0: [Task ưu tiên cao nhất] - [Dependencies: None]
  - P1: [Task ưu tiên cao] - [Dependencies: TASK-001]
  - P2: [Task ưu tiên trung bình] - [Dependencies: TASK-001, TASK-002]

## 7. Kiểm Thử & Đánh Giá

- **Kế Hoạch Kiểm Thử**: [Mô tả cách kiểm thử]
- **Tiêu Chí Thành Công**: [Xác định rõ khi nào tính năng được coi là hoàn thành]
- **Rủi Ro & Giảm Thiểu**: [Liệt kê rủi ro tiềm ẩn và cách giảm thiểu]

## 8. Tài Nguyên & Tham Khảo

- [Liệt kê tài liệu tham khảo và tài nguyên liên quan]
```

## Quy Trình 4 Vai Trò

- **_BẮT BUỘC_** tuân thủ quy trình 4 bước khi phát triển bất kỳ tính năng nào
- **_BẮT BUỘC_** không bỏ qua bước Architect để "code cho nhanh"
- **_BẮT BUỘC_** lập kế hoạch chi tiết trước khi bắt đầu code

### 1. Planner

- Sử dụng GPT-4o để viết PRD, vẽ user flows, chọn tech stack
- Xác định rõ scope và các yêu cầu
- Tạo file .md với đầy đủ thông tin về feature
- Tham khảo các kinh nghiệm tương tự trong `/experiences/`
- Thời gian dành cho planning: 15-20% tổng thời gian dự án

### 2. Architect

- Phân tách features thành các task nhỏ, manageable
- Định rõ logic cho từng màn hình và chức năng
- Xác định data flow và cấu trúc component
- Mô tả rõ API contract và database schema
- Thời gian dành cho architecture: 20-25% tổng thời gian

### 3. Builder

- Cung cấp plan và spec cho AI để generate code
- Kiểm tra code được tạo và đảm bảo tuân thủ rules
- Áp dụng các code conventions đã định nghĩa
- Commit code thường xuyên sau mỗi task nhỏ
- Thời gian dành cho building: 40-50% tổng thời gian

### 4. Tester

- Sử dụng AI để check bug và optimize code
- Viết test cases (unit test và integration test)
- Đánh giá performance và trải nghiệm người dùng
- Fix các vấn đề được phát hiện
- Thời gian dành cho testing: 15-20% tổng thời gian

### Hệ Quả Của Việc Bỏ Qua Quy Trình

- Khi bỏ qua bước Architect: Code không đồng bộ, UI không match với backend
- Khi bỏ qua planning: Tính năng không đáp ứng đúng nhu cầu, phải làm lại
- Khi bỏ qua testing: Sản phẩm không ổn định, xuất hiện bug khi sử dụng

## Quy trình thực hiện

### Bước 0: Context7 Architecture Analysis (Bắt buộc)

- **BẮT BUỘC**: Kiểm tra Context7 cho architecture patterns phù hợp
- **BẮT BUỘC**: Validate tech stack choices với industry best practices
- **BẮT BUỘC**: Phân tích dependencies và potential conflicts
- **BẮT BUỘC**: Thu thập performance benchmarks và scalability insights
- **BẮT BUỘC**: Kiểm tra security considerations cho tech stack được chọn

### Bước 1: Kiểm tra điều kiện tiên quyết (Enhanced)

- **BẮT BUỘC**: Kiểm tra file `Brainstorm_[TenDuAn].md` đã hoàn chỉnh
- **BẮT BUỘC**: Xác nhận tất cả thông tin brainstorm đã được validate
- **BẮT BUỘC**: Đảm bảo có đủ thông tin để bắt đầu planning
- **MỚI**: Verify Context7 insights đã được tích hợp vào brainstorm
- **MỚI**: Confirm tech stack compatibility với project requirements
- **NGHIÊM CẤM**: Bắt đầu planning khi brainstorm chưa hoàn thành

### Bước 2: Rà soát codebase hiện tại (Context-Aware)

- Phân tích cấu trúc dự án hiện tại
- Xác định các components/modules đã có
- Đánh giá chất lượng code hiện tại với Context7 standards
- **MỚI**: So sánh với industry best practices từ Context7
- **MỚI**: Identify modernization opportunities
- Xác định technical debt cần giải quyết với priority ranking

## Rà Soát Codebase

- **_BẮT BUỘC_** hiểu cấu trúc dự án hiện tại trước khi lên kế hoạch
- **_BẮT BUỘC_** xác định các module/thành phần sẽ bị ảnh hưởng
- **_BẮT BUỘC_** đánh giá mức độ tương thích của tính năng mới với codebase
- **_BẮT BUỘC_** xem xét các patterns và best practices đang được áp dụng
- **_MỚI_** tích hợp Context7 insights để validate architecture decisions
- **_MỚI_** so sánh với industry standards và best practices
- **_KHUYẾN NGHỊ_** tạo sơ đồ dependency giữa các thành phần liên quan
- **_KHUYẾN NGHỊ_** xác định các điểm có thể tái sử dụng và các điểm cần thay đổi

## Đánh Giá Độ Phức Tạp

- Sử dụng thang độ phức tạp để ước tính effort:

  - **Đơn Giản** (S): 1-4 giờ làm việc, không có rủi ro cao
  - **Trung Bình** (M): 4-8 giờ làm việc, có một số thách thức
  - **Phức Tạp** (L): 8-16 giờ làm việc, có nhiều thách thức
  - **Rất Phức Tạp** (XL): >16 giờ, cần chia nhỏ thành nhiều task

- Xác định độ phức tạp dựa trên các yếu tố:
  - Số lượng thành phần bị ảnh hưởng
  - Mức độ hiểu biết về kỹ thuật và domain
  - Yêu cầu về hiệu suất và bảo mật
  - Khả năng mở rộng và duy trì

## Lên Kế Hoạch Thực Hiện

- **_BẮT BUỘC_** chia nhỏ công việc thành các task cụ thể
- **_BẮT BUỘC_** xác định task dependencies (task nào phải hoàn thành trước)
- **_BẮT BUỘC_** ước tính thời gian cho từng task
- **_BẮT BUỘC_** xác định các milestone và điểm kiểm tra
- **_BẮT BUỘC_** lên kế hoạch kiểm thử cho từng thành phần
- **_KHUYẾN NGHỊ_** nhóm các task theo module hoặc chức năng
- **_KHUYẾN NGHỊ_** xây dựng roadmap trực quan

## Quản Lý Rủi Ro

- **_BẮT BUỘC_** xác định các rủi ro tiềm ẩn cho từng phần của kế hoạch
- **_BẮT BUỘC_** đánh giá tác động và khả năng xảy ra của từng rủi ro
- **_BẮT BUỘC_** lên kế hoạch dự phòng cho các rủi ro có tác động cao
- **_BẮT BUỘC_** thiết lập kế hoạch rollback trong trường hợp thất bại
- **_KHUYẾN NGHỊ_** ưu tiên làm proof-of-concept cho các phần rủi ro cao

## Kết Hợp Với Các Rule Khác

- **_BẮT BUỘC_** tuân thủ các quy định trong project-upgrade-workflow.mdc khi làm việc với dự án đã tồn tại
- **_BẮT BUỘC_** tuân thủ project-creation-workflow.mdc khi tạo dự án mới
- **_BẮT BUỘC_** áp dụng file-protection-rules.mdc trước khi thực hiện thay đổi lớn
- **_BẮT BUỘC_** sử dụng supabase-mcp-workflow.mdc khi làm việc với Supabase
- **_BẮT BUỘC_** tuân thủ nguyên tắc tối ưu hóa trong cursor-optimization-rules.mdc

## Đầu Ra Kế Hoạch

- Tài liệu kế hoạch đầy đủ được lưu trong `instructions/plans/`
- Cập nhật `Decisions.md` với các quyết định thiết kế quan trọng
- Cập nhật `Codebase.md` nếu cấu trúc dự án thay đổi đáng kể
- Roadmap trực quan (nếu cần) trong `instructions/plans/roadmaps/`
- Checklist các task đã được phân chia trong `instructions/plans/tasks/`
- Xác nhận người dùng đã đồng ý với kế hoạch trước khi thực hiện

## Vòng Đời Của Kế Hoạch

1. **Brainstorming**: Thu thập ý tưởng và yêu cầu từ người dùng
2. **Phân Tích**: Rà soát codebase và đánh giá tính khả thi
3. **Lập Kế Hoạch**: Tạo tài liệu kế hoạch chi tiết
4. **Xác Nhận**: Xin phê duyệt từ người dùng
5. **Triển Khai**: Thực hiện theo kế hoạch
6. **Đánh Giá**: Kiểm tra tiêu chí thành công
7. **Điều Chỉnh**: Cập nhật kế hoạch dựa trên phản hồi và kết quả

## Phản Hồi & Cải Tiến

- Sau khi hoàn thành kế hoạch, thu thập phản hồi từ người dùng
- Đánh giá hiệu quả của quy trình lập kế hoạch
- Cập nhật quy trình dựa trên bài học kinh nghiệm
- Ghi chép các lessons learned trong `Decisions.md`
